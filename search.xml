<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>通过Hexo建立我的第一个博客</title>
    <url>/year/08/01/Create%20Myblog/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、软件系统的安装"><a href="#一、软件系统的安装" class="headerlink" title="一、软件系统的安装"></a>一、软件系统的安装</h1><h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h2><blockquote>
<p>Git是目前世界上最先进的分布式<strong>版本控制</strong>系统，可以有效、高速的处理从很小到非常大的项目版本管理。   <a href="https://git-scm.com/">Git的安装地址</a>   <a href="https://www.cnblogs.com/ximiaomiao/p/7140456.html">Git的安装教程</a><br>Git 命令使用的小技巧：Ctrl+ins  复制             Shift+ins 粘贴</p>
</blockquote>
<h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><blockquote>
<p>Hexo是基于nodeJS编写的，所以需要安装一下nodeJS和里面的npm工具。<br><a href="https://nodejs.org/en/">Node.js的安装地址</a> &gt;&gt; 下载左边的Recommended For Most Users</p>
</blockquote>
<p>对于Linux系统只需输入一下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完成后，打开命令行，或者打开生成的Node.js command prompt ，分别输入以下命令行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v </span><br></pre></td></tr></table></figure>
<p>Windows在git安装完后，可以直接使用git bash来敲命令行了。</p>
<h2 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h2><h3 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介:"></a>Hexo简介:</h3><blockquote>
<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。大家可以进入<a href="https://hexo.io/zh-cn/">hexo官网</a>进行详细查看。</p>
<blockquote>
<p>由于node安装插件是从国外服务器下载，受网络影响大，速度慢且可能出现异常。所以淘宝团队（阿里巴巴旗下业务阿里云）为了解决这件事，设置了个国内的服务器来进行node的安装(就是淘宝镜像源)。安装，检测完成后，只需要使cnpm install即可。<a href="https://blog.csdn.net/qq_38566465/article/details/105857306?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159634172319724846448879%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159634172319724846448879&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~rank_business_v1-2-105857306.ecpm_v3_rank_business_v1&utm_term=%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E6%BA%90&spm=1018.2118.3001.4187">更多信息</a><br>安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定，不要害怕多试几次就可以了）</p>
</blockquote>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><code>cnpm</code>（返回cnpm的信息）<br><code>cnpm -v</code>（返回cnpm的版本信息）<br><code>cnpm install -g hexo-cli</code>（安装hexo框架）<br><code>hexo -v</code>（返回hexo的版本信息）<br><code>mkdir blog</code>(创建blog目录)<br><code>cd blog</code>(进入blog目录)<br><code>hexo init</code>(Window初始化博客) <code>sudo hexo init</code>(Linux初始化博客)<br><code>hexo server</code>(启动本地博客服务)<br>之后就可以进入浏览器输入本地访问地址：<a href="http://localhost:4000/">http://localhost:4000/</a> 大概长这个样：<br><img src="http://ww1.sinaimg.cn/large/d40b6c29gy1fvrksvj6e0j211c0f2n60.jpg" alt="hexo"><br><strong>注意：访问本地页面的时候hexo server 不可以按ctrl+c停止服务，否则会报404</strong><br>若输入上述命令后出现问题，则输入这行命令<code>npm install hexo-deployer-git --save</code></p>
<h1 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h1><h2 id="1、GitHub中建仓库"><a href="#1、GitHub中建仓库" class="headerlink" title="1、GitHub中建仓库"></a>1、GitHub中建仓库</h2><p>首先你得有个GitHub的账号，如果没有到<a href="https://github.com/join">官网注册</a>一个，账号弄完以后，即可建立仓库<img src="https://s1.ax1x.com/2020/08/02/aJvk2F.png" alt=" creat repository"> </p>
<hr>
<p><img src="https://s1.ax1x.com/2020/08/02/aJzPcF.png" alt="repository"><br>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。填写完毕后点击Create repository。</p>
<p>在Blog目录下安装一个hexo部署插件，输入命令：<br>:<code>cnpm install --save hexo-deployer-git</code><br>找到Blog文件中的   <code>_config.yml</code>  文件，使用编译器打开，<br>找到这部分代码，（原始的是没有repo，和branch的，而且type后面也没有东西）<br>对这段代码进行更改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Yourgithubname/Yourgithubnamei.github.io.git   </span><br><span class="line">  branch: master  </span><br></pre></td></tr></table></figure>
<p>其中Yourgithubname就是前面图片中创建库用的Owner</p>
<h2 id="2、生成SSH添加到GitHub"><a href="#2、生成SSH添加到GitHub" class="headerlink" title="2、生成SSH添加到GitHub"></a>2、生成SSH添加到GitHub</h2><p>SSH，简单来讲，就是一个秘钥，其中，id_rsa是你这台电脑的私人秘钥，不能给别人看的，id_rsa.pub是公共秘钥，可以随便给别人看。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。<br>继续在你的blog文件中，空白处，右键打开git bash ，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Yourname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;Youremail&quot;</span> </span><br></pre></td></tr></table></figure>
<p>其中的Yourname输入你的GitHub用户名，Youremail输入你GitHub的邮箱。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<p>可以用这两条命令查看，是否输入正确。之后输入以下命令创建SSH：<br><code>ssh-keygen -t rsa -C &quot;Youremail&quot;</code></p>
<blockquote>
<p>这个时候电脑创建了一个.ssh的文件,一般情况下C:\Users\ASUS.ssh的路径，在文件夹中找到id_rsa.pub文件，打开并复制里面的所有信息，之后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你复制的信息粘贴进去。<br>转到git bash，输入以下命令查看是否成功：<br><code>ssh -T git@github.com</code></p>
</blockquote>
<h2 id="3、将hexo部署到GitHub"><a href="#3、将hexo部署到GitHub" class="headerlink" title="3、将hexo部署到GitHub"></a>3、将hexo部署到GitHub</h2><p>依次输入命令： </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>其中 <code>hexo clean</code>清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code> 生成静态文章，可以用 hexo g缩写<br><code>hexo deploy</code> 部署文章到GitHub，可以用hexo d缩写<br>注意deploy时可能要你输入username和password。<br>部署完毕后，过一会儿就可以在<a href="http://yourname.github.io/">http://Yourname.github.io</a> 这个网站看到你的博客了！！</p>
<h2 id="4、个人域名："><a href="#4、个人域名：" class="headerlink" title="4、个人域名："></a>4、个人域名：</h2><blockquote>
<p>我觉得没必要，因为我现在只是个学生，需要的只是一个平台而已，没必要为了网页域名的逼格去购买域名，而且有的购买的便宜的域名，访问速度很慢，还不如就用GitHub提供的域名，这仅仅是现在大学生我的一个小想法，不喜勿喷。</p>
</blockquote>
<h2 id="5、写文章并发布文章到GitHub"><a href="#5、写文章并发布文章到GitHub" class="headerlink" title="5、写文章并发布文章到GitHub"></a>5、写文章并发布文章到GitHub</h2><p><code>hexo new newpapername</code><br>在<code>source/_post</code>中打开markdown文件，就可以开始编辑了。当你写完的时候，再在blog文件中，空白处，右键打开git bash ，输入命令来更新博客：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><blockquote>
<p>我也是从CSDN上找到的教程，通过<a href="https://blog.csdn.net/sinat_37781304/article/details/82729029?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase">这个博主的博客</a>来慢慢的创建了自己的博客，期间也遇到了不少的麻烦，从早上肝到凌晨3,4点才把博客建立起来，其中的小细节真的很气人，我在config.yml文件中的repo设置中，把github写成了gethub，之后就在CSDN上到处搜原因，找了好久的方法，最后才发现是自己的repository的建立都写错了，导致我复制到config.yml的内容有错，部署不到GitHub的库里，更部署不到hexo博客里，哎，代码这东西就是要仔细，尤其是在一些没有提示错误的软件上写代码，更要细心。</p>
</blockquote>
<p>npm</p>
]]></content>
      <tags>
        <tag>Markdown练习运用文章</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/year/04/24/Git/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git-分布式版本控制系统"><a href="#Git-分布式版本控制系统" class="headerlink" title="Git    分布式版本控制系统"></a>Git    分布式版本控制系统</h1>]]></content>
  </entry>
  <entry>
    <title>PR剪辑</title>
    <url>/year/08/10/PR%E5%89%AA%E8%BE%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      <categories>
        <category>视频剪辑</category>
      </categories>
      <tags>
        <tag>PR</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/year/11/12/SpringBoot/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring概念：</p>
<h2 id="Spring是一个开源框架，2003年兴起的一个轻量级的Java开发框架，作者是：Rob-Johnson"><a href="#Spring是一个开源框架，2003年兴起的一个轻量级的Java开发框架，作者是：Rob-Johnson" class="headerlink" title="#Spring是一个开源框架，2003年兴起的一个轻量级的Java开发框架，作者是：Rob Johnson"></a>#Spring是一个开源框架，2003年兴起的一个轻量级的Java开发框架，作者是：Rob Johnson</h2><h4 id="Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。"><a href="#Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。" class="headerlink" title="Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。"></a>Spring是为了解决企业级应用开发的复杂性而创建的，简化开发。</h4><h4 id="Spring是如何简化Java开发的："><a href="#Spring是如何简化Java开发的：" class="headerlink" title="Spring是如何简化Java开发的："></a>Spring是如何简化Java开发的：</h4><h5 id="采用了四种关键策略："><a href="#采用了四种关键策略：" class="headerlink" title="采用了四种关键策略："></a>采用了四种关键策略：</h5><ol>
<li>基于POJO的轻量级和最小侵入性编程；</li>
<li>通过IOC，依赖注入（DI）和面向接口实现松耦合；</li>
<li>基于切面（AOP）和惯例进行声明式编程</li>
<li>通过切面和模板减伤样式代码</li>
</ol>
<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>SpringBoot本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速，敏捷地开发新一代基于Spring框架的应用程序。是和Spring框架紧密结合用于提升Spring开发者体验的工具。SpringBoot以<strong>约定大于配置的核心思想</strong>，默认帮我们进行很多设置，多数SpringBoot应用只需要很少的Spring配置，同时集成了大量常用的第三方库的配置，SpringBoot应用这些第三方库几乎可以零配置的开箱即用。SpringBoot并不是什么新框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，SpringBoot整合了所有的框架。</p>
<h3 id="Spring-Boot的主要优点"><a href="#Spring-Boot的主要优点" class="headerlink" title="Spring Boot的主要优点:"></a>Spring Boot的主要优点:</h3><ol>
<li>为所有Spring开发者更快的入门</li>
<li>·开箱即用，提供各种默认配置来简化项目配置</li>
<li>内嵌式容器简化Web项目</li>
<li>没有冗余代码生成和XML配置的要求</li>
</ol>
<h2 id="编写yaml："><a href="#编写yaml：" class="headerlink" title="编写yaml："></a>编写yaml：</h2><h3 id="自动装配原理："><a href="#自动装配原理：" class="headerlink" title="自动装配原理："></a>自动装配原理：</h3><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><ul>
<li><p>spring-boot-dependencies :核心依赖在父工程中!</p>
</li>
<li><p>我们在写或者引入一些Springboot依赖的时候，不需要指定版本，就因为有这些版本仓库。</p>
</li>
</ul>
<h4 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter&lt;/ artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>


<p>启动器:说白了就是Springboot的启动场景;<br>比如spring-boot-starter-web，他就会帮我们自动导入web环境所有的依赖!</p>
<p>springboot会将所有的功能场景，都变成一个个的启动器<br>我们要使用什么功能，就只需要找到对应的启动器就可以了starter</p>
<h4 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h4>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/year/08/01/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>精准还原bilibili官网</title>
    <url>/year/08/15/%E5%89%8D%E7%AB%AF%E8%BF%98%E5%8E%9Fbilibili%E5%AE%98%E7%BD%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="面试题（刨根问底式）"><a href="#面试题（刨根问底式）" class="headerlink" title="面试题（刨根问底式）"></a>面试题（刨根问底式）</h1><p>1.什么叫做标签语意化？<br>答：合理的标签做合适的事情（每一个标签都有自己的语意）<br>2.都有哪些标签？<br>答：块级标签：div , p , h1~h6 , ul/li , ol/li , dl/dt/dd , 或者 header  footer  main  section  aside<br>行内标签：<br>行内块级标签：<br>3.三大类标签的区别以及相互转换？</p>
<p>4.display:block/inline-block/inline , display除了这些值还有哪些？<br>none   flex  table  grid …<br>5.none 控制隐藏，其他让一个元素消失在视线中的方式有哪些？<br>visibillity:hidde       ;   opacity:0   ;  定位后调整z-index   ；  足够大的负margin或者负top值<br>6.visibility:hidden和none的区别？<br>opacity设置透明度，IE中如何设置？filter在项目中除了设置透明度还可以干嘛？在什么需求下用到了-margin<br>7..标签语意化的意义？</p>
<blockquote>
<p>性能的提高<br>有助于SEO搜索引擎的优化（前提：内容不是基于客户端的渲染）<br>有助于开发和维护</p>
</blockquote>
]]></content>
      <categories>
        <category>学习知识</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/year/01/11/%E6%8A%95%E8%B5%84%E7%90%86%E8%B4%A2%E5%AD%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="投资理财学"><a href="#投资理财学" class="headerlink" title="投资理财学"></a>投资理财学</h1><h2 id="一、你不理财，财不理你-——書德柒，嘻嘻嘻"><a href="#一、你不理财，财不理你-——書德柒，嘻嘻嘻" class="headerlink" title="一、你不理财，财不理你                                       ——書德柒，嘻嘻嘻"></a>一、你不理财，财不理你                                       ——書德柒，嘻嘻嘻</h2><ol>
<li><h3 id="致富途径有两个，一是通过出售自己的体力或者脑力，二是投资，让钱生钱。"><a href="#致富途径有两个，一是通过出售自己的体力或者脑力，二是投资，让钱生钱。" class="headerlink" title="致富途径有两个，一是通过出售自己的体力或者脑力，二是投资，让钱生钱。"></a>致富途径有两个，一是通过出售自己的体力或者脑力，二是投资，让钱生钱。</h3></li>
<li><h3 id="投资理财不是一时的冲动，不是投机取巧，也不是凭借运气，而是一种对财富的驾驭能力，一种需要去认真学习和实践的方法与技术"><a href="#投资理财不是一时的冲动，不是投机取巧，也不是凭借运气，而是一种对财富的驾驭能力，一种需要去认真学习和实践的方法与技术" class="headerlink" title="投资理财不是一时的冲动，不是投机取巧，也不是凭借运气，而是一种对财富的驾驭能力，一种需要去认真学习和实践的方法与技术"></a>投资理财不是一时的冲动，不是投机取巧，也不是凭借运气，而是一种对财富的驾驭能力，一种需要去认真学习和实践的方法与技术</h3></li>
<li><h3 id="投资是一个长期过程，需要时间和耐心，循序渐进并持之以恒。如果经不住诱惑，幻想一夜暴富，那么就有可能血本无归"><a href="#投资是一个长期过程，需要时间和耐心，循序渐进并持之以恒。如果经不住诱惑，幻想一夜暴富，那么就有可能血本无归" class="headerlink" title="投资是一个长期过程，需要时间和耐心，循序渐进并持之以恒。如果经不住诱惑，幻想一夜暴富，那么就有可能血本无归"></a>投资是一个长期过程，需要时间和耐心，循序渐进并持之以恒。如果经不住诱惑，幻想一夜暴富，那么就有可能血本无归</h3></li>
<li><h3 id="无论何时，稳健的投资才是王道。"><a href="#无论何时，稳健的投资才是王道。" class="headerlink" title="无论何时，稳健的投资才是王道。"></a>无论何时，稳健的投资才是王道。</h3></li>
<li><h3 id="滴水成河，积沙成塔，积土成山，积水成海，日计不足，岁计有余"><a href="#滴水成河，积沙成塔，积土成山，积水成海，日计不足，岁计有余" class="headerlink" title="滴水成河，积沙成塔，积土成山，积水成海，日计不足，岁计有余"></a>滴水成河，积沙成塔，积土成山，积水成海，日计不足，岁计有余</h3></li>
</ol>
<h2 id="二、会算计，不受穷-——高薪水比不上会理财"><a href="#二、会算计，不受穷-——高薪水比不上会理财" class="headerlink" title="二、会算计，不受穷                                               ——高薪水比不上会理财"></a>二、会算计，不受穷                                               ——高薪水比不上会理财</h2><ol>
<li><h3 id="脑袋决定钱袋，让理财的观念植入脑中"><a href="#脑袋决定钱袋，让理财的观念植入脑中" class="headerlink" title="脑袋决定钱袋，让理财的观念植入脑中"></a>脑袋决定钱袋，让理财的观念植入脑中</h3></li>
<li><h3 id="注重积累，善于理财，小钱也能成就大富"><a href="#注重积累，善于理财，小钱也能成就大富" class="headerlink" title="注重积累，善于理财，小钱也能成就大富"></a>注重积累，善于理财，小钱也能成就大富</h3></li>
<li><h3 id="小钱亦可成大事，理财并不是富人的行为，他们的财富都是由小钱经过长期的投资逐步积累"><a href="#小钱亦可成大事，理财并不是富人的行为，他们的财富都是由小钱经过长期的投资逐步积累" class="headerlink" title="小钱亦可成大事，理财并不是富人的行为，他们的财富都是由小钱经过长期的投资逐步积累"></a>小钱亦可成大事，理财并不是富人的行为，他们的财富都是由小钱经过长期的投资逐步积累</h3></li>
<li><h3 id="莫要幻想以后能找多少钱，而是对当下的收入重视起来，就算很微薄，也就有它的理财方法"><a href="#莫要幻想以后能找多少钱，而是对当下的收入重视起来，就算很微薄，也就有它的理财方法" class="headerlink" title="莫要幻想以后能找多少钱，而是对当下的收入重视起来，就算很微薄，也就有它的理财方法"></a>莫要幻想以后能找多少钱，而是对当下的收入重视起来，就算很微薄，也就有它的理财方法</h3></li>
<li><h3 id="人生的不同阶段，都会有不同的追求，别让现在你的挥霍，影响到未来的生活"><a href="#人生的不同阶段，都会有不同的追求，别让现在你的挥霍，影响到未来的生活" class="headerlink" title="人生的不同阶段，都会有不同的追求，别让现在你的挥霍，影响到未来的生活"></a>人生的不同阶段，都会有不同的追求，别让现在你的挥霍，影响到未来的生活</h3></li>
<li><h3 id="现代社会，“忙碌”是每个上班族的标签，忙碌过后，我们只会想去尽量的用自己赚的钱来享受，毕竟是对自己一种回报嘛，可想过自己享受过后的经济状况会如何，如果又变成月光族了的话，那么就要控制自己的享受程度，学会理财"><a href="#现代社会，“忙碌”是每个上班族的标签，忙碌过后，我们只会想去尽量的用自己赚的钱来享受，毕竟是对自己一种回报嘛，可想过自己享受过后的经济状况会如何，如果又变成月光族了的话，那么就要控制自己的享受程度，学会理财" class="headerlink" title="现代社会，“忙碌”是每个上班族的标签，忙碌过后，我们只会想去尽量的用自己赚的钱来享受，毕竟是对自己一种回报嘛，可想过自己享受过后的经济状况会如何，如果又变成月光族了的话，那么就要控制自己的享受程度，学会理财"></a>现代社会，“忙碌”是每个上班族的标签，忙碌过后，我们只会想去尽量的用自己赚的钱来享受，毕竟是对自己一种回报嘛，可想过自己享受过后的经济状况会如何，如果又变成月光族了的话，那么就要控制自己的享受程度，学会理财</h3></li>
<li><h3 id="投资别因为别人说买入什么，就买什么，那么可能会亏的血本无归，要学会辨别消息的真假，消息的实时可靠性"><a href="#投资别因为别人说买入什么，就买什么，那么可能会亏的血本无归，要学会辨别消息的真假，消息的实时可靠性" class="headerlink" title="投资别因为别人说买入什么，就买什么，那么可能会亏的血本无归，要学会辨别消息的真假，消息的实时可靠性"></a>投资别因为别人说买入什么，就买什么，那么可能会亏的血本无归，要学会辨别消息的真假，消息的实时可靠性</h3></li>
<li><h3 id="恐惧和贪婪，这两种传染性极强的灾难的偶然爆发会永远在投资界出现。而我们的目标：只要在别人贪婪时恐惧，在别人恐惧时贪婪"><a href="#恐惧和贪婪，这两种传染性极强的灾难的偶然爆发会永远在投资界出现。而我们的目标：只要在别人贪婪时恐惧，在别人恐惧时贪婪" class="headerlink" title="恐惧和贪婪，这两种传染性极强的灾难的偶然爆发会永远在投资界出现。而我们的目标：只要在别人贪婪时恐惧，在别人恐惧时贪婪"></a>恐惧和贪婪，这两种传染性极强的灾难的偶然爆发会永远在投资界出现。而我们的目标：只要在别人贪婪时恐惧，在别人恐惧时贪婪</h3></li>
<li><h3 id="在理财的时候，一定要选择长期持有，只有这样才能降低投资成本和跑赢通货膨胀，使资产的不断增值，著名的股神巴菲特就是用长期持有的理财方式，一度超过比尔盖茨成为世界首富，连巴菲特都等得起，我们为什么等不起"><a href="#在理财的时候，一定要选择长期持有，只有这样才能降低投资成本和跑赢通货膨胀，使资产的不断增值，著名的股神巴菲特就是用长期持有的理财方式，一度超过比尔盖茨成为世界首富，连巴菲特都等得起，我们为什么等不起" class="headerlink" title="在理财的时候，一定要选择长期持有，只有这样才能降低投资成本和跑赢通货膨胀，使资产的不断增值，著名的股神巴菲特就是用长期持有的理财方式，一度超过比尔盖茨成为世界首富，连巴菲特都等得起，我们为什么等不起"></a>在理财的时候，一定要选择长期持有，只有这样才能降低投资成本和跑赢通货膨胀，使资产的不断增值，著名的股神巴菲特就是用长期持有的理财方式，一度超过比尔盖茨成为世界首富，连巴菲特都等得起，我们为什么等不起</h3></li>
<li><h3 id="对于那些年轻的经验不足的人来说，要想的是先把本金保住再去收益，因为没有足够的经验去观察市场的情况，无法判断和抓住投资的机会，这样一来，你就会处于更加大的风险"><a href="#对于那些年轻的经验不足的人来说，要想的是先把本金保住再去收益，因为没有足够的经验去观察市场的情况，无法判断和抓住投资的机会，这样一来，你就会处于更加大的风险" class="headerlink" title="对于那些年轻的经验不足的人来说，要想的是先把本金保住再去收益，因为没有足够的经验去观察市场的情况，无法判断和抓住投资的机会，这样一来，你就会处于更加大的风险"></a>对于那些年轻的经验不足的人来说，要想的是先把本金保住再去收益，因为没有足够的经验去观察市场的情况，无法判断和抓住投资的机会，这样一来，你就会处于更加大的风险</h3></li>
<li><h3 id="别再一棵树上吊死，也别把一个鸡蛋放在同一个篮子里，投资多种稳定的保险和基金上，形成较为稳定的收入，最大限度地获得良好的收益的同事保障自己的财产安全"><a href="#别再一棵树上吊死，也别把一个鸡蛋放在同一个篮子里，投资多种稳定的保险和基金上，形成较为稳定的收入，最大限度地获得良好的收益的同事保障自己的财产安全" class="headerlink" title="别再一棵树上吊死，也别把一个鸡蛋放在同一个篮子里，投资多种稳定的保险和基金上，形成较为稳定的收入，最大限度地获得良好的收益的同事保障自己的财产安全"></a>别再一棵树上吊死，也别把一个鸡蛋放在同一个篮子里，投资多种稳定的保险和基金上，形成较为稳定的收入，最大限度地获得良好的收益的同事保障自己的财产安全</h3></li>
<li><h3 id="那些所谓的消费观“前卫”的年轻人，根本不会算一些长远的账，只顾眼下利益，全然不为自己将来考虑，什么享受当下，都是安慰已经无力回天自己的鸡汤罢辽。我现在就能够算一笔账，我書德柒，打王者近20000把，而且我基本上都是打排位，那么每把排位按正常的时间来算，就是15分钟一把（王者这款游戏的更新，在于不断的压缩游戏的时间，而我是已经入坑了4年多了，看着王者的变化，刚开始的时候还打过不少40分钟以上的局，所以我算的时间是远远不足的），那就是30万分钟，如果算每天工作8个小时，那么每天的时间就是480分钟，拿30万除以480-得625天，就是说我每天抱着手机玩8个小时，都要玩1-7年，而你现在只有21岁，这只是算的是我打游戏的冰山一角，浪费在游戏上的青春太多太多了，但又克制不了不去玩，只有通过培养一些兴趣爱好来抵制我想玩游戏的欲望。所谓的账，不一定是关于钱的，也可以是关于时间的，关于生活中的一切的，算个账，不会花太多的时间，让你明白这件事或是这个人值不值得你去付出"><a href="#那些所谓的消费观“前卫”的年轻人，根本不会算一些长远的账，只顾眼下利益，全然不为自己将来考虑，什么享受当下，都是安慰已经无力回天自己的鸡汤罢辽。我现在就能够算一笔账，我書德柒，打王者近20000把，而且我基本上都是打排位，那么每把排位按正常的时间来算，就是15分钟一把（王者这款游戏的更新，在于不断的压缩游戏的时间，而我是已经入坑了4年多了，看着王者的变化，刚开始的时候还打过不少40分钟以上的局，所以我算的时间是远远不足的），那就是30万分钟，如果算每天工作8个小时，那么每天的时间就是480分钟，拿30万除以480-得625天，就是说我每天抱着手机玩8个小时，都要玩1-7年，而你现在只有21岁，这只是算的是我打游戏的冰山一角，浪费在游戏上的青春太多太多了，但又克制不了不去玩，只有通过培养一些兴趣爱好来抵制我想玩游戏的欲望。所谓的账，不一定是关于钱的，也可以是关于时间的，关于生活中的一切的，算个账，不会花太多的时间，让你明白这件事或是这个人值不值得你去付出" class="headerlink" title="那些所谓的消费观“前卫”的年轻人，根本不会算一些长远的账，只顾眼下利益，全然不为自己将来考虑，什么享受当下，都是安慰已经无力回天自己的鸡汤罢辽。我现在就能够算一笔账，我書德柒，打王者近20000把，而且我基本上都是打排位，那么每把排位按正常的时间来算，就是15分钟一把（王者这款游戏的更新，在于不断的压缩游戏的时间，而我是已经入坑了4年多了，看着王者的变化，刚开始的时候还打过不少40分钟以上的局，所以我算的时间是远远不足的），那就是30万分钟，如果算每天工作8个小时，那么每天的时间就是480分钟，拿30万除以480,得625天，就是说我每天抱着手机玩8个小时，都要玩1.7年，而你现在只有21岁，这只是算的是我打游戏的冰山一角，浪费在游戏上的青春太多太多了，但又克制不了不去玩，只有通过培养一些兴趣爱好来抵制我想玩游戏的欲望。所谓的账，不一定是关于钱的，也可以是关于时间的，关于生活中的一切的，算个账，不会花太多的时间，让你明白这件事或是这个人值不值得你去付出"></a>那些所谓的消费观“前卫”的年轻人，根本不会算一些长远的账，只顾眼下利益，全然不为自己将来考虑，什么享受当下，都是安慰已经无力回天自己的鸡汤罢辽。我现在就能够算一笔账，我書德柒，打王者近20000把，而且我基本上都是打排位，那么每把排位按正常的时间来算，就是15分钟一把（王者这款游戏的更新，在于不断的压缩游戏的时间，而我是已经入坑了4年多了，看着王者的变化，刚开始的时候还打过不少40分钟以上的局，所以我算的时间是远远不足的），那就是30万分钟，如果算每天工作8个小时，那么每天的时间就是480分钟，拿30万除以480,得625天，就是说我每天抱着手机玩8个小时，都要玩1.7年，而你现在只有21岁，这只是算的是我打游戏的冰山一角，浪费在游戏上的青春太多太多了，但又克制不了不去玩，只有通过培养一些兴趣爱好来抵制我想玩游戏的欲望。所谓的账，不一定是关于钱的，也可以是关于时间的，关于生活中的一切的，算个账，不会花太多的时间，让你明白这件事或是这个人值不值得你去付出</h3></li>
<li><h3 id="①存钱是实现财富增值，②对人生的风险要有一定的规划，，③投资一些金融理财的产品"><a href="#①存钱是实现财富增值，②对人生的风险要有一定的规划，，③投资一些金融理财的产品" class="headerlink" title="①存钱是实现财富增值，②对人生的风险要有一定的规划，，③投资一些金融理财的产品"></a>①存钱是实现财富增值，②对人生的风险要有一定的规划，，③投资一些金融理财的产品</h3></li>
<li><h3 id="基金定投是一种比较好的理财方式，长期获利稳定，风险低，购买和卖出手续简单，像我现在肯定不能，因为，我还没有一个能够正常且长期赚钱的生计，卡里哪来的钱投啊"><a href="#基金定投是一种比较好的理财方式，长期获利稳定，风险低，购买和卖出手续简单，像我现在肯定不能，因为，我还没有一个能够正常且长期赚钱的生计，卡里哪来的钱投啊" class="headerlink" title="基金定投是一种比较好的理财方式，长期获利稳定，风险低，购买和卖出手续简单，像我现在肯定不能，因为，我还没有一个能够正常且长期赚钱的生计，卡里哪来的钱投啊"></a>基金定投是一种比较好的理财方式，长期获利稳定，风险低，购买和卖出手续简单，像我现在肯定不能，因为，我还没有一个能够正常且长期赚钱的生计，卡里哪来的钱投啊</h3></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>日语学习</title>
    <url>/year/08/08/%E6%97%A5%E8%AF%AD%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="日语的自我介绍"><a href="#日语的自我介绍" class="headerlink" title="日语的自我介绍"></a>日语的自我介绍</h1><h2 id="第一课"><a href="#第一课" class="headerlink" title="第一课"></a>第一课</h2><h3 id="打招呼-问候"><a href="#打招呼-问候" class="headerlink" title="打招呼-问候"></a>打招呼-问候</h3><blockquote>
<p>平假名作用：</p>
<blockquote>
<p>1.用来标注汉字的发音<br>2.单独构成单词　<br>　练习：初次见面：初めまして（有文化）、はじめまして<br>　     我是郭：かくです 我叫郭：かくと申します<br>　　　　山东省：さんとうしょう(sa nn to u syo u(拗音))からきました　　　　二十一：にじゅういっさい（ni jyu u i ssa i）歳（さい）です</p>
</blockquote>
</blockquote>
<h2 id="第二课"><a href="#第二课" class="headerlink" title="第二课"></a>第二课</h2><h3 id="自己的职业"><a href="#自己的职业" class="headerlink" title="自己的职业"></a>自己的职业</h3><blockquote>
<p>1．我的职业是学生：いまはがくせいです（今は学生です）<br> 我的职业是自由职业：いまはじゆうぎょうです（今は自由業です）</p>
</blockquote>
<h3 id="兴趣-爱好"><a href="#兴趣-爱好" class="headerlink" title="兴趣-爱好"></a>兴趣-爱好</h3><blockquote>
<p>王安妮が好きです</p>
</blockquote>
<h2 id="第三课"><a href="#第三课" class="headerlink" title="第三课"></a>第三课</h2><h3 id="我的梦想"><a href="#我的梦想" class="headerlink" title="我的梦想"></a>我的梦想</h3><blockquote>
<p>第一人称：私(wa ta shi )・僕(bo ku)・俺(o re )・あたし(a ta shi )<br>梦想是成为大老板：夢は社長になることです(yu me ha sya cyo u ni na ru ko to de su )<br>职业：</p>
<blockquote>
<p>声优：せいゆう(se i yu u )                   漫画家：まんがか (ma nn ga ka)<br>歌手：かしゅ        (ka syu)                   土豪：お金持ち  ( o ka ne mo chi )</p>
</blockquote>
</blockquote>
<h3 id="很高兴见到你"><a href="#很高兴见到你" class="headerlink" title="很高兴见到你"></a>很高兴见到你</h3><p>どうぞよろしくおねがいします（do u zo yo ro shi ku o ne ga i shi ma su ）</p>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>r—l</p>
]]></content>
      <categories>
        <category>学习知识</category>
      </categories>
      <tags>
        <tag>日语</tag>
      </tags>
  </entry>
  <entry>
    <title>英语口语</title>
    <url>/year/08/01/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="英语兔音标课"><a href="#英语兔音标课" class="headerlink" title="英语兔音标课"></a>英语兔音标课</h1><h2 id="音标历史"><a href="#音标历史" class="headerlink" title="音标历史"></a>音标历史</h2><blockquote>
<p>1.国际音标IPA（International Phonetic Alphabet）发明于19世纪末<br>2.丹尼尔 · 琼斯教授（Daniel Jones）出版的一本书名为：English Pronouncing Dictionary，其中大量的音标都是从国际音标里面照搬过来的，为的是给那个年代的标准英式英语(Rreceived Pronunciation)注音，这就是DJ音标（广义上的国际音标）的诞生，广泛应用于中国的教育教学当中<br>3.Hohn Kenyon &amp; Thomas Knott 发明了PRONOUNCING  DICTIONARY AMERICAN ENGLISH“美国英语发音词典”，也就是KK音标，基本只在台湾地区的教材中使用，即使在美国本土，使用也并不广泛<br>4.Webster’s Dictionary （韦氏词典）才是大多数美国人从小到大使用的词典<br>5.American Heritage Dictionary(AHD)美国传统英语词典<br>6.Respelling方法就是用我们熟悉的简单的音来标注一些不熟悉的难的音,用的就是常用词的音去标注</p>
<blockquote>
<p>后面英语兔老师用的是DJ音标，最主要的原因是DJ音标被国内的主流词典广泛使用，列入牛津，剑桥和朗文词典。</p>
</blockquote>
</blockquote>
<h2 id="音标学习"><a href="#音标学习" class="headerlink" title="音标学习"></a>音标学习</h2><h3 id="DJ音标新版（IPA-88）"><a href="#DJ音标新版（IPA-88）" class="headerlink" title="DJ音标新版（IPA 88）"></a>DJ音标新版（IPA 88）</h3><p><img src="https://s1.ax1x.com/2020/08/12/avMdDf.png" alt="DJ音标示范"></p>
<h3 id="KK音标"><a href="#KK音标" class="headerlink" title="KK音标"></a>KK音标</h3><p><img src="https://s1.ax1x.com/2020/08/13/azXDuq.png" alt="KK音标示范"></p>
<h3 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h3><h4 id="1-iː"><a href="#1-iː" class="headerlink" title="1./iː/"></a>1./iː/</h4><p>bee,fee,pea,read,meat,lead</p>
<blockquote>
<p>‘ː’  表示长音<br>和“ 医 ”发音相似；<br>舌位更高；<br>嘴角要向两侧拉开</p>
<blockquote>
<p>对应KK音标中把长音符号去掉/i/</p>
</blockquote>
</blockquote>
<h4 id="2-ɪ"><a href="#2-ɪ" class="headerlink" title="2./ɪ/"></a>2./ɪ/</h4><p>bit,fit,pit,lit,hit,fish </p>
<blockquote>
<p>舌位更低，再低就更像/e/；<br>舌尖在下齿后方；<br>嘴角没有/i:/那么咧开；<br>发音更加’放松‘</p>
<blockquote>
<p>在KK音标中写法一样</p>
</blockquote>
</blockquote>
<h4 id="3-e"><a href="#3-e" class="headerlink" title="3./e/"></a>3./e/</h4><p>bed,get,pet,let,met,set </p>
<blockquote>
<p>双唇自然张开，口腔放松；<br>舌尖在下牙齿后方，舌面平放；<br>有些人人说中文发的“短促”的  ’哎‘</p>
</blockquote>
<h4 id="4-ae"><a href="#4-ae" class="headerlink" title="4./æ/"></a>4./æ/</h4><p>bad ,fat,pat,lad,mat,sat</p>
<blockquote>
<p>最容易读错的音之一；<br>口型一定要张大，饱满；<br>嘴角也要向两边拉伸；<br>舌端在下牙齿后方</p>
<blockquote>
<p>绕口令：Ed h<u>a</u>d edited it.</p>
</blockquote>
</blockquote>
<h4 id="5-ɜː"><a href="#5-ɜː" class="headerlink" title="5./ɜː/"></a>5./ɜː/</h4><p>her,person,learn,bird,word,fur,urgent detergent/ˈɜːdʒənt dɪˈtɜːdʒənt/</p>
<blockquote>
<p>嘴自然张开，唇和舌都自然放松；<br>像普通话里的“饿”；<br>要确保发音时间够长；<br>若不重读，发音更短的话—-&gt;/ə/</p>
<blockquote>
<p>单词字母拼写有er，ear，ir，ur等情况，体现的是英语拼写和发音往往不对应的一点<br>r-colorization:美式英语中，/ɜː/后接/r/,写作/ɜːr/（/ɝ/）,这就是DJ音标给美式英语标注的写法</p>
</blockquote>
</blockquote>
<h4 id="6-ə"><a href="#6-ə" class="headerlink" title="6./ə/"></a>6./ə/</h4><p>about,problem,easily,memory,supply,syringe,balloon,taken,family,pencil,freedom,support,analysis</p>
<blockquote>
<p>嘴自然张开，唇和舌都自然放松；<br>像是普通话里的轻声“么”的韵母；<br>不要重读，轻轻地让气流冲出声带自然读出；</p>
<blockquote>
<p>若是重读，再延长读音的话—-&gt;/ɜː/ ;<strong>英语中出现频率最高，最特殊，最重要</strong>，甚至有个单独的名字schwa（“中央元音”或“中性元音”），因为很多单词中的元音字母都读/ə/，而不是元音字母本音，也可以理解为过渡音<br>r-colorization:美式英语中，/ə/后接/r/,写作/ər/（/ɚ/）,这就是DJ音标给美式英语标注的写法</p>
</blockquote>
</blockquote>
<p><strong>/ə/是一个非常特殊的音：</strong><br><strong>1.让说话者在不需要强调某个音时用它代替</strong><br><strong>2.为了在某个音上减少所花时间</strong><br><strong>3.弱化成一个“中性的默认音”</strong><br><strong>4./ə/至关重要：英语诗歌基于节奏的语言（stress-timed language）,而我们的中文是基于音节的语言（syllable-timed langage）</strong><br><strong>5.弱读的现象：I can try to do it—&gt;/ai kən trai tə du: ət/</strong><br><strong>6.有时候/ə/甚至被省略不读：family—&gt;famly</strong></p>
<h4 id="7-ɑː"><a href="#7-ɑː" class="headerlink" title="7./ɑː/"></a>7./ɑː/</h4><p>father,fast,glass,car,park,mark</p>
<blockquote>
<p>/ɑː/和“啊”相似，但不同<br>/ɑː/的口型更大，发音更靠口腔后部（舌根处）<br>发音时长要足够长</p>
<blockquote>
<p>在英式英语和美式英语里发音基本一致，列如：father，spa，palm<br>在英音中有/ɑː/的很多词，在美音中是/æ/，列如：bath,ask,glass,fast,last,<br>在美音中有/ɑː/（DJ音标），也就是/ɑ/（KK音标），的很多词在英音中是/ɒ/，列如：hot,top,box<br>如果这个音后面跟字母r，美音中往往r化（r-colorization），发/ɑr/这个音，列如：bar,card,large</p>
</blockquote>
</blockquote>
<h4 id="8-v"><a href="#8-v" class="headerlink" title="8./ʌ/"></a>8./ʌ/</h4><p>but,hut,must,son,ton,done</p>
<blockquote>
<p>舌尖在下牙齿后方，舌头平放<br>发音靠口腔中后方<br>近似普通话中的“啊”，但是口型没那么大，时长更短</p>
<blockquote>
<p>与美音发音不同，美音/ʌ/和中央元音/ə/的发音部位和舌位可以说是相同的，区别在于是否重读，美音中的/ʌ/发音，更靠近中文的“呃”，而不是“啊”<br>在美式英语中/ʌ/和/ə/的发音一般不做明显的口型舌位区分，区别体现在发音轻重上，/ə/只出现在轻度音节中，而/ʌ/只出现在重读音节中。custom /ˈkʌstəm/中的/ə/和/ʌ/音体现出了发音的轻重。</p>
</blockquote>
</blockquote>
<h4 id="9-ʊ"><a href="#9-ʊ" class="headerlink" title="9./ʊ/"></a>9./ʊ/</h4><p>book,look,good,took,bush,would</p>
<blockquote>
<p>/ʊ/和普通话中的“呜”相似，但并不相同<br>发/ʊ/时，嘴唇没那么”噘“，更放松，时长更短，发音更靠后<br>/ʊ/并不是把长音的/uː/短着读，/ʊ/的唇形更圆，更放松</p>
<blockquote>
<p>KK音标中没有/ʊ/，<strong>但对应的是/u/是个缩小了的大写字母U</strong><br>绕口令：Mr.C<u>oo</u>k said to a c<u>oo</u>k:”L<u>oo</u>k at this c<u>oo</u>k-b<u>oo</u>k.It’s very g<u>oo</u>d.”So the c<u>oo</u>k t<u>oo</u>k the advice of Mr.C<u>oo</u>k and bought the b<u>oo</u>k.<br>How much w<u>oo</u>d w<u>ou</u>ld a w<u>oo</u>dchuck chuck if a w<u>oo</u>dchuck c<u>ou</u>ld chuck w<u>oo</u>d?He w<u>ou</u>ld chuck,he w<u>ou</u>ld,as much as he c<u>ou</u>ld,and chuck as much w<u>oo</u>d as a w<u>oo</u>dchuck w<u>ou</u>ld if a w<u>oo</u>dchuck c<u>ou</u>ld chuck w<u>oo</u>d.</p>
</blockquote>
</blockquote>
<h4 id="10-uː"><a href="#10-uː" class="headerlink" title="10./uː/"></a>10./uː/</h4><p>too,food,loose,prove,moon,soon</p>
<blockquote>
<p>和中文普通话中“呜”相似，但并不相同<br>口型没有那么圆，而是更扁<br>发音部位靠口腔后部</p>
<blockquote>
<p>比较：”too“和“兔”<br>KK音标中就是去掉长音符号/u/,实际上KK音标中没有长音符号，主要是因为KK音标的元音时长往往视具体所在单词情况而定</p>
</blockquote>
</blockquote>
<h4 id="11-ɒ"><a href="#11-ɒ" class="headerlink" title="11./ɒ/"></a>11./ɒ/</h4><p>top,hot,lot,box,stop,wash</p>
<blockquote>
<p>和普通话中的“凹”相似，就像是汉语拼音中的ao，但并不完全相同<br>发/ɒ/时，嘴型更小，时间更短</p>
<blockquote>
<p>在老版的DJ音标中是/ɔ/，严格来说，在KK音标中没有对应的音标<br>绕口令：I thought that cl<u>o</u>th w<u>a</u>s a l<u>o</u>t for my father.<br>在英式英语中的/ɒ/这个音，在美音中一般读/ɑː/</p>
</blockquote>
</blockquote>
<h4 id="12-oː"><a href="#12-oː" class="headerlink" title="12./ɔː/"></a>12./ɔː/</h4><p>caught,bought,law,saw,door,four</p>
<blockquote>
<p>和普通话的“哦”相似<br>嘴唇要撅起来，圆而外凸<br>口腔后方发音</p>
<blockquote>
<p>KK音标就是去掉长音符号<br>若该音后面跟r，美音中往往r化（r-colorization）发/ɔːr/这个音<br><img src="https://s1.ax1x.com/2020/08/13/dpFKsS.png" alt="英音和美音区别"></p>
</blockquote>
</blockquote>
<h4 id="13-eɪ"><a href="#13-eɪ" class="headerlink" title="13./eɪ/"></a>13./eɪ/</h4><p>make,date,cake,safe,play,plane</p>
<blockquote>
<p>是双元音（diphthong）,有两个原因组成<br>/e/和/ɪ/一前一后快速紧密发出<br>发这个音的时候口腔是有变化的<br>类似“嘿”的韵母</p>
<blockquote>
<p>常见错误：/eɪn/读成/en/，列如：plane,train,rain,main,dangerous,strange</p>
</blockquote>
</blockquote>
<h4 id="14-aɪ"><a href="#14-aɪ" class="headerlink" title="14./aɪ/"></a>14./aɪ/</h4><p>time,bike,nice,like,site,life</p>
<blockquote>
<p>类似于“爱”，但更加饱满</p>
<blockquote>
<p>KK音标中写法和发音基本一致的</p>
</blockquote>
</blockquote>
<h4 id="15-oɪ"><a href="#15-oɪ" class="headerlink" title="15./ɔɪ/"></a>15./ɔɪ/</h4><p>boy,toy,soy,voice,noise,moist</p>
<blockquote>
<p>注意的是容易把/ɪ/读成/e/，误读成/ɔe/</p>
<blockquote>
<p>KK音标中写法和发音基本一致的</p>
</blockquote>
</blockquote>
<h4 id="16-aʊ"><a href="#16-aʊ" class="headerlink" title="16./aʊ/"></a>16./aʊ/</h4><p>how,cow,allow,house,loud,mouse</p>
<blockquote>
<p>类似普通话中的“嗷”，但不相同</p>
<blockquote>
<p>这是个双元音，区别于/ɔː/<br>KK音标中写法和发音基本一致的</p>
</blockquote>
</blockquote>
<h4 id="17-əʊ"><a href="#17-əʊ" class="headerlink" title="17./əʊ/"></a>17./əʊ/</h4><p>open,hope,post</p>
<blockquote>
<p>相似于我们普通话中的“呕”，但并不相同<br>英音发音更靠前，而美音和我们拼音的ou更相似</p>
<blockquote>
<p>DJ音标的/əʊ/在KK音标中对应的符号/o/<br>我们在用DJ音标标注美音时一般都用/oʊ/这个音标，代替/əʊ/</p>
</blockquote>
</blockquote>
<h4 id="18-ɪə"><a href="#18-ɪə" class="headerlink" title="18./ɪə/"></a>18./ɪə/</h4><p>idea,area,various,dear,fear,here</p>
<blockquote>
<p>从/ɪ/到/ə/过渡时舌端往口腔后部上扬，导致末尾/ə/误读成卷舌</p>
<blockquote>
<p>在读英音的时候，单词中即使出现字母r，单词的内部也不会‘r化’<br>在读美音的时候，只有单词内部出现r化才有可能‘r化’，所以对于idea，不论是在英音还是美音都不可能出现’r‘化的<br>美音中，单词中出现r，则对应的读音为/ɪr/,、<br>在KK音标中写法和发音基本一致的</p>
</blockquote>
</blockquote>
<h4 id="19-eə"><a href="#19-eə" class="headerlink" title="19./eə/"></a>19./eə/</h4><p>hair,chair,pair,fare,care,dare</p>
<blockquote>
<p>因为是双元音，所以注意读音，可能发成/æə/,/ær/,/aɪə/</p>
<blockquote>
<p>依然要注意，在读英音时，即使单词中出现r，也不会’r化‘<br>在KK音标中对应的是/ɛr/,因为在美式英语中，读音在英音中包含/eə/的词基本上都包括r字母，在美音中‘r化’</p>
</blockquote>
</blockquote>
<h4 id="20-ʊə"><a href="#20-ʊə" class="headerlink" title="20./ʊə/"></a>20./ʊə/</h4><p>poor,tour,moor,tore,pore,more,pure,cure,lure</p>
<blockquote>
<p>在/jʊə/音中，/j/是个辅音，也有人称其为“半元音”<br>把/ʊə/和/ɔː/区分开来</p>
<blockquote>
<p>在KK音标中写作/ur/，其中的/u/音是大写U的缩小版，相当于/ɪ/是缩小了的大写字母I<br>在美式英语中，读音在英音中包含/ʊə/的词基本都包含字母r，在美音中’r化‘</p>
</blockquote>
</blockquote>
<h3 id="辅音"><a href="#辅音" class="headerlink" title="辅音"></a>辅音</h3><h4 id="1-p-b"><a href="#1-p-b" class="headerlink" title="1./p/  /b/"></a>1./p/  /b/</h4><p>peak,pet,pig<br>1.如果p后有元音</p>
<blockquote>
<p>比如：peak,这样的单词/p/的发音基本都是送气音（aspirated）<br>和普通话中的“泼”的声母发音基本一致</p>
</blockquote>
<p>2.如果p紧跟s</p>
<blockquote>
<p>比如：speak,这样的单词/p/的发音基本都是不送气音（unaspirated）<br>普通话中的”波“的声母，但发音不同</p>
</blockquote>
<p>3.如果p后紧跟某些辅音</p>
<blockquote>
<p>比如：trapdoor,help,leap<br>嘴巴闭上基本完成发音<br>这种发音也叫作：无声除阻音（unreleased stop）（也称“不完全爆破音”）</p>
<blockquote>
<p>虽然在DJ音标和KK音标中写法相同，但是读音不同，在语音学上叫做“同位异音”或“音位变体”（allophone）</p>
</blockquote>
</blockquote>
<p>bed,beak,big<br>/b/是浊辅音（vioced consonant）,声带振动<br>与中文的“波”的声母是轻音</p>
<h4 id="2-t-d"><a href="#2-t-d" class="headerlink" title="2. /t/ /d/"></a>2. /t/ /d/</h4><h4 id="3-k-g"><a href="#3-k-g" class="headerlink" title="3./k/ /g/"></a>3./k/ /g/</h4><h4 id="4-f-v"><a href="#4-f-v" class="headerlink" title="4./f/ /v/"></a>4./f/ /v/</h4><h4 id="5-s-z"><a href="#5-s-z" class="headerlink" title="5./s/ /z/"></a>5./s/ /z/</h4><h4 id="6-θ-ð"><a href="#6-θ-ð" class="headerlink" title="6./θ/ /ð/"></a>6./θ/ /ð/</h4><h4 id="7-ʃ-ʒ"><a href="#7-ʃ-ʒ" class="headerlink" title="7./ʃ/ /ʒ/"></a>7./ʃ/ /ʒ/</h4><h4 id="8-tʃ-dʒ"><a href="#8-tʃ-dʒ" class="headerlink" title="8./tʃ/ /dʒ/"></a>8./tʃ/ /dʒ/</h4><h4 id="9-m-n-ŋ"><a href="#9-m-n-ŋ" class="headerlink" title="9./m/ /n/ /ŋ/"></a>9./m/ /n/ /ŋ/</h4><h4 id="10-h"><a href="#10-h" class="headerlink" title="10./h/"></a>10./h/</h4><h4 id="11-j"><a href="#11-j" class="headerlink" title="11./j/"></a>11./j/</h4><h4 id="12-w"><a href="#12-w" class="headerlink" title="12./w/"></a>12./w/</h4><h4 id="13-r"><a href="#13-r" class="headerlink" title="13./r/"></a>13./r/</h4><h4 id="14-l"><a href="#14-l" class="headerlink" title="14./l/"></a>14./l/</h4><h4 id="15-ts-dz"><a href="#15-ts-dz" class="headerlink" title="15./ts/ /dz/"></a>15./ts/ /dz/</h4><h4 id="16-tr-dr"><a href="#16-tr-dr" class="headerlink" title="16./tr/ /dr/"></a>16./tr/ /dr/</h4><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.DJ音标旧版本/i,e,u,əː,ei,əu,ɔ,ai,ɛə,uə/，DJ音标新版本/ɪ,ɛ,ʊ,ɜː,eɪ,əʊ,ɒ,aɪ,eə,ʊə/<br>2.KK音标中没有马蹄ʊ<br>3.在中国国内，有些老师教授的是美式英语，但用的是KK音标，就和学校教材里传统是用的DJ音标不同，这点容易混淆<br>4.之所以要学音标，就有点像是学中文时要先从汉语拼音开始学习一样，打牢这个语言的基础<br>5.我们平时接触的英语中有美式发音，又有英式发音，所以导致我们有些时候说英语一句话中既有美音，又有英音，虽然对交流没什么影响，但是既然已经想学好这么语言，就不能在乎多学点，精益求精<br>6.在美式英语中，读音在英音中包含/ʊə//eə/的词基本都包含字母r，在美音中’r化‘</p>
]]></content>
      <categories>
        <category>学习知识</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>置顶试验</title>
    <url>/year/08/05/%E7%BD%AE%E9%A1%B6%E8%AF%95%E9%AA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>阅读理解：<br>定位和替换，定位到一句，同义替换<br>定位方法：题干中关键词寻找；考点寻找：转折，因果，比较，标点，长段落的首位<br>若单词不认识，无法进行同义替换，那就用排除法</p>
<p>翻译：</p>
]]></content>
      <tags>
        <tag>new</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络学习</title>
    <url>/year/08/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一章：概述</p>
<ol>
<li><p>P2P（对等）下载，有点像是迅雷下载，热门文件下载速度就很快，有多个下载源</p>
</li>
<li><p>电路交换，适用于大量数据间的交换，允许在传输数据前，花时间建立连接，之后有一个释放连接的过程，中间交换机的专线；     分组交换，主要适用于计算机，将数据分为多段数据并添上首部，不占线的，可以复用数据，路由器可以有存储转发的功能，有延迟，但相较电路交换更高效；     报文交换比分组交换时间还长</p>
</li>
<li><p>局域网和广域网新的理解：不单单从网络覆盖的范围来区分，主要从应用的技术来区分，局域网：自己购买设备，带宽固定，距离100米以内；广域网：花钱买服务和带宽</p>
</li>
<li><p>速率：数字在信道上的传送的数据位数的速率，b/s,kb/s,Mb/s,Gb/s</p>
</li>
<li><p>带宽：数据信道所能传输的最高速率</p>
</li>
<li><p>吞吐量：单位时间内通过某个网络的数据量</p>
</li>
<li><p>时延：整体可以理解为去火车站买车票然后去目的地的过程，先排队再处理，之后发送，最后传播的过程</p>
<blockquote>
<p>发送时延：数据块长度（比特）/信道带宽（比特/秒）</p>
</blockquote>
<blockquote>
<p>传播时延：信道长度（米）/在信道上传播的速率（米/秒）</p>
</blockquote>
<blockquote>
<p>处理时延：</p>
</blockquote>
<blockquote>
<p>排队时延：</p>
</blockquote>
</li>
<li><p>时延带宽积：传播时延×带宽，表示这个带宽链路上盛满数据的量</p>
</li>
<li><p>往返时间：RTT ：<code>cmd</code>中ping   网络IP地址</p>
</li>
<li><p>信道利用率：有数据通过时间/总数据通过时间，和时延有一定的关系，利用率越高时延就越大，就像是在马路上的车一样，车子越多，马路的利用率就越高，那车子的通过速率就越慢；网络利用率：信道利用率加权平均值</p>
</li>
<li><p><code>netstat -nb</code>电脑一开机，就以管理员身份输入命令，立即可以查木马</p>
</li>
<li><p>OSI七层（从高到低）：应用层；表示层；会话层；传输层；网络层；数据链路层；物理层，前三层是程序设计师需要考虑的问题，后四层是网络工程师需要考虑的问题</p>
<blockquote>
<p>理解：应用层是否能运行和网络层没关系，只要网络通就可以正常运行， </p>
</blockquote>
</li>
<li><p>网络排错：从底层到高层排查</p>
</li>
<li><p>网络安全和OSI参考模型：物理层安全，数据链路层安全 ADSL AP密码；网络层安全；应用层安全  SQL注入漏洞   上传漏洞（黑客）</p>
</li>
</ol>
<p>第二章</p>
<p>物理层主要任务描述为：确定与传输媒体的接口的一些特性，即：机械特性，电气特性，功能特性，过程特性</p>
<p>数据通信：数据，信号，模拟信号，数字信号，码元，单向通信（单工通信），双向交替通信（半双工通信），双向同时通信（全双工通信），基带信号，带通信号的概念</p>
<p>基带数字信号的几种调制方法：调幅，调频，调相</p>
<p>单极性不；归零码，双极性不归零码，曼彻斯特编码，差分曼彻斯特编码</p>
<p>奈氏准则：码元的传输速率是有限制的，否则就会出现码间串扰。最高码元传输速率=2WBaud，其中W是理想低通道的带宽，单位为HZ，Baud是波特，是码元传输速率的单位</p>
<p>香农公式指出了信息传输速率的上限。</p>
<p>公式：C = W * log2(1+S/N)</p>
<p>注：C是信道的极限信息传输速率，单位bit/s。<br>  <strong>W为信道带宽（Hz）。</strong><br>  <strong>S为信道内所传信号的平均功率。</strong><br>  <strong>N为信道内部的高斯噪声功率。</strong></p>
<p>注：香农公式表明，信道的带宽或信道中的信噪比越大，信息的极限传输速率就越高。</p>
<ol start="7">
<li>物理层下的传输媒体：电磁波（短驳通信，微波通信），光纤（多模光纤，单模光纤），集线器（是一个冲突域，而且信息不安全）</li>
<li>频分复用：就像是电话线可以成组之后分出去，承担多条线路的使用</li>
<li>时分复用：数据通过顺序传入到信道，可以想象成发数据的发送端和接收端有一个旋转传输数据的轮盘，以匀速来接受并发送传来的数据。缺点：信道资源的浪费</li>
<li>统计时分复用：不分顺序，加标记</li>
<li>波分复用：可以理解为光的频分复用</li>
<li>码分复用CDMA ：计算发送码片序列和收到码片序列的与积，如果是1或-1则，发送了数据，0则没发送数据；         码片的正交：把向量的各分量值相乘之后，再把各分量相加，除以他的码片个数，若为零，则正交</li>
<li>数字通信技术：T1,E1</li>
<li>宽带接入技术： ADSL技术，低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。</li>
</ol>
<p>第三章：数据链路层</p>
<ol>
<li><p>点对点信道和广播信道。链路就是一条物理线路段，数据链路就是把实现通讯的硬件和软件加到链路上，构成了数据链路，一般的适配器（即网卡）都包括了数据链路层和物理层这两层的功能</p>
</li>
<li><p>在链路层传输的内容叫做帧，数据单位也是帧</p>
</li>
<li><blockquote>
<p>三个基本问题：</p>
<p>1.封装成帧：添加首部和尾部，帧定界，不收不完整的，也就是缺少首部或者尾部的帧</p>
<p>2.透明传输：加转义字符，避免数据传输出错，再把数据送往网络层之前删除插入的转义字符，若转移字符出现在数据中，那么就删除前面的一个转义字符</p>
<p>3.差错控制：比特差错，用的是循环冗余检验的方法：被除数加几个零（加几个零就相当于与2的几次方），除数的位数就要大于几，在除的过程中，如果高位不够除成零，就商零，继续得到一个三位数的余数，加在要传输的数据后面，要验证的话，就用传过来的数据除以除数看是否能除尽，也就是没有余数，如果是，那么在传输过程中就没有丢失数据</p>
</blockquote>
<p>4.数据链路层只管数据的正确的接收，不管是否有丢包，做到数据上的可靠传输，并不是绝对的可靠<br>5.PPP协议：拨号有身份验证的功能，支持多种网络协议，多种类型的链路，检测连接状态，最大传送单元（&lt;1500），网络层地址协商，数据压缩协商<br>6.PPP协议帧格式：字节填充：7E–&gt;7D+5E,7D–&gt;7D+5D,信息字段中出现ASCII码的控制字符，则在前面加7D字节；零比特填充法：在连续的5个1后面填入一个0再发送出去，两种填充方法都是为了透明传输。<br>7.最初的以太网不能同时处理一个发和收，安全性很差，抓包工具可以抓取在连路上的所有包<br>8.以太网的协议：CSMA/CD，只能进行班、半双工通信。<br>9.碰撞的检测，以太网一般不超过100米的原因：假设A,B两段发送数据，A先发送数据，后来B有发送数据，是在A还没发送完数据的情况下发送的，这样两个就会碰撞，而检测到发生碰撞是你发送数据的两倍的时间，双方检测到碰撞的时间都是2倍τ ，所以以太网的网线有限制，这种发送不确定性是整个以太网的平均通信量远小于以太网的最高数据率，比如一个网的带宽是10M/S，但最后是达不到10M/S的速率。<br>10.争用期：以太网的最短有效帧为64字节，低于64则扔掉，争用期一般是2τ，即端到端传播时延的两倍。二进制指数类型退避算法：发生碰撞后，要退避一个随机的时间之后再发送数据，定义一个参数k，表示重传次数，与比较取最小，取值，代入到一个整数集合0到2的k次方减1，再从中随机的取出一个数，记为r，退避时间就是r×2τ，若重传达16词还不成功，则丢弃。<br>11.以太局域网：媒体接入层<br>12.以太网提供的服务是不可靠的交付，即尽最大努力的交付，如果接收到有差错的帧，则丢弃，什么也不做<br>13.以太网的信道利用率a=τ/T0,理想情况下的利用率：*<code>Smax</code>*=T0/(T0+τ)=1/1+a<br>14.MAC层的硬件地址：MAC地址重复会影响网络连接<br>15.网桥的好处：过滤了通信量，提高了可靠性，可互连不同物理层、不同MAC子层和不同速率的局域网；坏处：存储转发增加了时延<br>16.虚拟的局域网：LAN 和VLAN: 一个VLAN = 一个广播域=逻辑网段（子网）VLAN 划分网络更加灵活安全 。 如果有多个VLAN通过的链路就需要配置为干道链路，否则就配置为访问链路。<br>17.ISL干道使VLAN能够跨骨干，虚拟局域网帧格式：在一条网的帧格式中插入一个4字节的标识符，成为VLAN 标记，指明发送该帧的工作站属于哪个虚拟局域网。</p>
<p>第四章：网络层 </p>
<p>实现可靠性传输是端系统，而不是网络系统</p>
<ol>
<li><p>网络层向运输层提供的两种服务：虚电路服务和数据报服务 ，虚电路服务可以想象成流水线上的传输，数据报服务可以想象成生活中快递的传输，现在都是用的数据报服务</p>
</li>
<li><p>虚拟互联网：</p>
<ul>
<li><p>互联设备：</p>
</li>
<li><p>转发器（物理层中继系统）</p>
</li>
<li><p>网桥、交换机、桥接器（数据链路层中继系统）</p>
</li>
<li><p>路由器（网络层中继系统）</p>
</li>
<li><p>网关（网络层以上的中继系统）</p>
</li>
</ul>
</li>
<li><p>IP地址</p>
</li>
</ol>
</li>
<li><ul>
<li><p>IP层次结构：层次化IP地址将32位的IP地址分为网络ID和主机ID</p>
</li>
<li><p>IP地址的分类：A 类地址主机ID占24字节，可以容纳的主机为256×256× 256个计算机，B类地址主机ID占16个字节，C类地址主机ID占8个字节</p>
</li>
<li><p>地址类的判断：一个字节，也就是八位二进制，第一位是0 的就是A类地址（0—126），前面是10的就是B类地址（128.1—191.255），前面是11的就是C类地址（192.0.1—223.255.255），同理可得D,E 类地址，也可以通过子网掩码的255个数来判断类别</p>
<ol start="5">
<li>特殊的几个地址：</li>
</ol>
</li>
<li><p>127.0.0.1 本地环回地址</p>
</li>
<li><p>169.254.0.0  Windows系统在DHCP信息租用失败时自动给客户机分配的地址</p>
</li>
<li><p>保留的私网地址:10.0.0.0 A类地址</p>
<ol start="6">
<li>子网掩码</li>
</ol>
<ul>
<li>通过子网掩码判断IP地址的类别， 在用IP地址和子网掩码做与运算，之后主机位归零</li>
</ul>
</li>
<li><p>子网划分，注：主机部分不能全为1或0， 全为0，是一个网段，全为1，是广播。</p>
</li>
<li><p>每个子网是原来的1/2，子网掩码往后移一位  </p>
</li>
<li><p>等分成四个子网 ，每个子网是原来的1/2×1/2，子网掩码向右移了三位，乘了几次1/2，子网掩码往右移了几位</p>
</li>
<li><p>点对点的子网分配255.255.255.252，只有两个IP分配，不会造成子网浪费</p>
</li>
<li><p>子网的分配是有规律的，不是任意的想把那各区域分配几个就能分配几个，要遵循二进制”除二“的规律</p>
</li>
<li><p><img src="https://img-blog.csdnimg.cn/20190531204423947.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDE5Njk4,size_16,color_FFFFFF,t_70"></p>
<ol start="6">
<li>和子网划分相反的概念：超网:</li>
</ol>
<blockquote>
<p>如何实现两个网络的合并：可以将子网掩码移动，实现网络部分统一了，不一定任意两个连着的网络就能够合并    </p>
</blockquote>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>学习知识</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/year/10/20/Java/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序=数据结构＋算法(集合框架);</p>
<p>程序猿程序=面向对象＋框架;码农</p>
<h3 id="查看源码的方法："><a href="#查看源码的方法：" class="headerlink" title="查看源码的方法："></a>查看源码的方法：</h3><ol>
<li>鼠标中键</li>
<li>按住Ctrl再点需要查看的类</li>
<li>双击shift，弹出搜索框来搜索类</li>
</ol>
<h2 id="代码快捷生成："><a href="#代码快捷生成：" class="headerlink" title="代码快捷生成："></a>代码快捷生成：</h2><p><code>查看类中所有方法：Alt+7</code> </p>
<p><code>查看当前类的继承关系：F4    Ctrl+o</code></p>
<p><code>查找接口实现类：ctrl + alt + B</code></p>
<p><code>搜索类：Ctrl+Shift+T</code></p>
<p><code>一键格式化代碼：Ctrl+Alt+L</code></p>
<p><code>try/catch的快捷键：ctrl+alt+t</code> </p>
<p><code>psf 生成公共静态final：public static final</code> </p>
<p>   <code>psfi 生成公共静态 final int：public static final int</code> </p>
<p>   <code>psfs 生成公共静态final String：public static final String</code> </p>
<p>   <code>itar 生成array for代码块：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   for (int i &#x3D; 0; i &lt; array.length; i++) &#123;</span><br><span class="line">       String tmp &#x3D; array[i];</span><br><span class="line">   &#125;</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>   <code>itco 生成Collection迭代：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  for (Iterator&lt;String&gt; iterator &#x3D; locationUrl.iterator(); iterator.hasNext(); ) &#123;</span><br><span class="line">String next &#x3D;  iterator.next();      </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>   <code>iten 生成enumeration遍历：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  while (enumeration.hasMoreElements()) &#123;</span><br><span class="line">Object nextElement &#x3D;  enumeration.nextElement();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>   <code>iter 生成增强forxun：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (String s : locationUrl) &#123;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>   <code>itit 生成iterator 迭代：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while (iterator.hasNext()) &#123;</span><br><span class="line">       Object next &#x3D;  iterator.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   <code>itli 生成List的遍历：</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  for (int i &#x3D; 0; i &lt; locationUrl.size(); i++) &#123;</span><br><span class="line">String s &#x3D;  locationUrl.get(i);</span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure>

<p>   <code>ittok 生成String token遍历：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (StringTokenizer stringTokenizer &#x3D; new StringTokenizer(TVSOU_URL); stringTokenizer.hasMoreTokens(); ) &#123;</span><br><span class="line">       String s &#x3D; stringTokenizer.nextToken();    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>   <code>10.fori 生成递增循环：</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 10; i++) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>   <code>10.forr 生成递减循环:</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i &#x3D; 10; i &gt; 0; i--) &#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><code>itve 生成Vector数组迭代：</code></p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; vector.size(); i++) &#123;</span><br><span class="line">    Object elementAt &#x3D;  vector.elementAt(i);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<pre><code>`itaws 生成Axis2 web service调用：`</code></pre>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  try &#123;</span><br><span class="line">      MyServiceStub stub &#x3D; new MyServiceStub();</span><br><span class="line">      stub.sayHelloWorldFrom();</span><br><span class="line">   &#125; catch (Exception ex) &#123;</span><br><span class="line">      ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>`itws 生成 Axis web service调用：`</code></pre>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  try &#123;</span><br><span class="line">       MyServiceLocator locator &#x3D; new MyServiceLocator();</span><br><span class="line">       Activator service &#x3D; locator.get();</span><br><span class="line">    &#x2F;&#x2F; If authorization is required</span><br><span class="line">       &#x2F;&#x2F;((MyService_Soap_BindingStub)service).setUsername(&quot;user3&quot;);</span><br><span class="line">    &#x2F;&#x2F;((MyService_Soap_BindingStub)service).setPassword(&quot;pass3&quot;);</span><br><span class="line">       &#x2F;&#x2F; invoke business method</span><br><span class="line">       service.businessMethod();</span><br><span class="line">   &#125; catch (javax.xml.rpc.ServiceException ex) &#123;</span><br><span class="line">       ex.printStackTrace();</span><br><span class="line">   &#125; catch (java.rmi.RemoteException ex) &#123;</span><br><span class="line">       ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>psvm : 生成main方法:<br>public static void main(String[] args) {}</p>
</li>
<li><p>serr : 生成打印输出Errror:<br>System.err.println();</p>
</li>
<li><p>sout : 生成打印输出:<br>System.out.println(“”);</p>
</li>
<li><p>souf : 生成打印输出:<br>System.out.printf(“”);</p>
</li>
<li><p>soutm : 生成打印输出当前类的当前方法名<br>System.out.println(“CurrentClass.currentMetohd”);</p>
</li>
<li><p>soutp : 生成打印输出当前方法参数及参数值<br>System.out.println(“args = “ + args);</p>
</li>
<li><p>“abc”.sout : 生成打印字符串 “abc”:<br>System.out.println(“abc”);</p>
</li>
<li><p>psf : 生成 共有 静态最终的<br>public static final</p>
</li>
<li><p>psfi : 生成 共有 静态最终的 int<br>public static final int</p>
</li>
<li><p>psfs : 生成 共有 静态最终的 String<br>public static final String</p>
</li>
<li><p>CTRL+ALT+T / Command +option + T : 把选中的代码放在 if/while/for/try里</p>
</li>
<li><p>ifn : 生成判断是否为空<br>if (x == null) {}</p>
</li>
<li><p>inn : 生成判断是否不为空<br>if (x != null) {<br>}</p>
</li>
<li><p>inst : 生成是否是该对象引用<br>if (x instanceof Object) {<br> Object o = (Object) x;<br>}</p>
</li>
<li><p>fori : 生成简单for循环<br>for (int i = 0; i &lt; ; i++) {<br>}</p>
</li>
<li><p>itli : 生成list的for循环<br>for (int i = 0; i &lt; list.size(); i++) {<br> String s = list.get(i);<br>}</p>
</li>
<li><p>itar : 生成array的for循环<br>int[] array = {1,2,3,4,5};<br>for (int i = 0; i &lt; array.length; i++) {<br> int i1 = array[i];<br>}</p>
</li>
<li><p>iter : 根据最近数组/集合生成增强for循环<br>for (String s : list) {<br>}</p>
</li>
<li><p>list.for : 生成指定数组增强for循环<br>for (String s : list) {<br>}</p>
</li>
<li><p>I : 生成空白格式增强for循环<br>for (Object ob : ) {<br>}</p>
</li>
<li><p>iten : 生成 enumeration遍历<br>while (enumeration.hasMoreElements()) {<br> Object nextElement = enumeration.nextElement();<br>}</p>
</li>
<li><p>itit : 生成迭代器 iterator<br>while (iterator.hasNext()) {<br> Object next = iterator.next();<br>}</p>
</li>
<li><p>itco : 生成Collection迭代器<br>for (Iterator iterator = list.iterator(); iterator.hasNext(); ) {<br> String next = iterator.next();<br>}</p>
</li>
<li><p>“xxx”.try : 生成try…catch<br>try {<br>  “xxx”<br>} catch (Exception e) {<br> e.printStackTrace();<br>}</p>
</li>
<li><p>xxxList.for + tab : 快速生成对象for循环<br>List&lt;Demo&amp; demoList = Lists.newArrayList();<br>//demoList.for + tab<br>for (Demo demo : demoList) {<br>}</p>
</li>
<li><p>entity.getXxx().var + tab : 快速回去对象属性值并赋值给变量<br>List&lt;Demo&amp; demoList = Lists.newArrayList();<br>Demo demo = new Demo();<br>//demo.getName().val + tab<br>String name = demo.getName();</p>
<h1 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a>String 类型</h1><h2 id="“test”-sout-输出"><a href="#“test”-sout-输出" class="headerlink" title="“test”.sout //输出"></a>“test”.sout //输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   System.out.println(&quot;test&quot;);</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="“test”-cast-转换"><a href="#“test”-cast-转换" class="headerlink" title="“test”.cast //转换"></a>“test”.cast //转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">((光标位置) &quot;test&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="“test”-format-字符串格式化"><a href="#“test”-format-字符串格式化" class="headerlink" title="“test”.format //字符串格式化"></a>“test”.format //字符串格式化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.format(&quot;test&quot;, 光标位置)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="“test”-inst-或者-“test”-instanceof"><a href="#“test”-inst-或者-“test”-instanceof" class="headerlink" title="“test”.inst 或者 “test”.instanceof"></a>“test”.inst 或者 “test”.instanceof</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;test&quot; instanceof  ? ((光标位置) &quot;test&quot;) : null;</span><br><span class="line">   1</span><br></pre></td></tr></table></figure>

<h2 id="“test”-nn-或者-“test”-notnull"><a href="#“test”-nn-或者-“test”-notnull" class="headerlink" title="“test”.nn 或者 “test”.notnull"></a>“test”.nn 或者 “test”.notnull</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (&quot;test&quot; !&#x3D; null) &#123;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line">   123</span><br></pre></td></tr></table></figure>

<h2 id="“test”-null"><a href="#“test”-null" class="headerlink" title="“test”.null"></a>“test”.null</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   if (&quot;test&quot; &#x3D;&#x3D; null) &#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h2 id="“test”-par"><a href="#“test”-par" class="headerlink" title="“test”.par"></a>“test”.par</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(&quot;test&quot;)</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="“test”-return"><a href="#“test”-return" class="headerlink" title="“test”.return"></a>“test”.return</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return &quot;test&quot;;</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h2 id="“test”-synchronized"><a href="#“test”-synchronized" class="headerlink" title="“test”.synchronized"></a>“test”.synchronized</h2></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   synchronized (&quot;test&quot;) &#123;</span><br><span class="line">    </span><br><span class="line">   &#125;</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<h2 id="“test”-try"><a href="#“test”-try" class="headerlink" title="“test”.try"></a>“test”.try</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line"> &quot;test&quot;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">12345</span><br></pre></td></tr></table></figure>

<h2 id="“test”-var"><a href="#“test”-var" class="headerlink" title="“test”.var"></a>“test”.var</h2>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String test &#x3D; &quot;test&quot;;</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h1 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h1>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true.  自动联想N多快捷方法</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<h1 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h1>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a &#x3D; 2;</span><br><span class="line">a. 自动联想N多快捷方法，包括循环</span><br></pre></td></tr></table></figure>

<ol start="5">
<li></li>
</ol>
<ol start="6">
<li></li>
</ol>
<p>面向对象：</p>
<p>对于类的创建和使用，无外乎就是操作类的变量，调用类的方法，通过对象.属性，对象.方法执行</p>
<p>对于public和private的理解：</p>
<blockquote>
<p>public是公有的数据变量，可以再内部类和外部类中同时调用的，而private只能在内部类中调用</p>
</blockquote>
<p>匿名类对象</p>
<p>方法的重载，同一个类中，允许存在一个以上的同名方法，只要参数个数或者参数类型不同或者参数类型的顺序不同即可，参数名字不同不构成重载。</p>
<p>Java中特有的…的方式来说传递可变个数的参数，这种参数在使用时与数组的使用方式相同，但数组没有参数的话，就需要定义一个空数组或者是null</p>
<p>这种…代表可以传递0到多个参数</p>
<p>对于NullPointerException空指针的理解：1.类没有初始化，例如定义了个String，List，Map 等对象没有初始化就直接使用，肯定会出空指针错误，正确初始化如下： String str=&quot;&quot;; List list = new Array List(); Map map = new HashMap(); 2.在使用框架，例如Spring的时候成员对象是通过注入进来的，需要注意一下两点： 1）成员变量必须有get set 方法 2）必须在配置文件中把实例化好的对象注入进来 3.对上面的描述的一个补充，判断字符串是否为空在java中比较好的写法是 if(rb!=null&amp;&amp;!&quot;&quot;.equals(rb.trim())) ………….; 这种判断风格还是比较不错的（摘自CSDN中的一名学者）</p>
<p>基本数据类在参数的传递过程中，就是把实参的值复制到形参上，引用数据在参数传递的过程中，都是指向在堆内存中的同一个对象，是可以改变堆内存中的值。</p>
<p>封装的隐藏，主要是对属性做封装和隐藏，不能让调用者随意使用，先将数据声明为私有，在提供公共的方法来实现对该属性的操作，一般写<code>[getXxx(),setXxx()]()</code>,方法。</p>
<p>访问权限修饰符：private，缺省，protected , public,对于class的修饰，只能用缺省或者public，在同一个Java文件中可以写多个的class，但是只有一个public，其他的class只能是缺省，而缺省的只能在同一个包下访问。总结：如果子类和父类在同一个包下，那么对于父类的成员修饰符只要不是private，那子类就可以使用；如果子类和父类不在同一个包下，子类只能使用父类中protected和public修饰的成员</p>
<p>类的构造方法，构造器有两类：隐式无参构造和显式有参（无惨）构造，new对象实际上就是调用类的构造方法。构造器的重载,重载的多个构造方法实际上就是相当于提供了多个初始化new对象的模板</p>
<p>对于this的使用，使用当前类的成员变量或成员方法可以再其前面添加this，增强程序的阅读性，this.成员变量。当形参与成员变量重名时，如果在方法内部需要使用成员变量，必须添加this来表明该变量时类成员。使用this()必须放在构造器的首行；使用this调用本类中其他的构造器，保证至少有一个构造器是不用this的，否则会出现递归构造器自己调用自己的情况，就会报错。</p>
<p>继承：将共性的代码抽出来，写成父类，简化代码。子类的共性代码都是继承父类的，每个子类只要写自己的特有的代码，通过extends来继承，写法：class Subclass extends Superclass{}，不要为了获取其他类中某个功能而去继承，还是要符合生活实际，让代码更有意义。注：子类不是父类的子集，而是对父类的扩展。单继承性是指子类只能有一个父类，多层继承指子类还可以作为父类来继承。</p>
<p>方法的重写：子类重写父类的方法，只是重写编写方法体的代码；子类重写的时候就不能比父类更严格的访问权限</p>
<p>super：来调用父类中的指定操作，尤其是当子父类出现同名成员时，可以使用super进行区分，可以调用自己之上的所有父类。父类只有有参构造可以使用的时候，子类必须构建一个构造来调用父类的有参构造，并且调用父类构造方法要写在第一行，就像是父类有的，子类才能够调用，默认有无参构造，如果只写了一个有参构造的话，子类就必须调用，如果既有无参构造，又有有参构造，那么既可以调无参，又可以调有参。</p>
<p>this和super的区别：</p>
<ol>
<li>访问属性：this是访问本类以及父类中的属性，而super只访问父类中的属性</li>
<li>调用方法：this调用本类中的方法；super直接访问父级中的方法（多层继承）</li>
<li>调用构造器：this调用本类构造器，必须放在构造器的首行；super调用父类构造器，必须放在子类构造器的首行，两个关键字只能有一个占据首行。</li>
<li>特殊：表示的是当前对象</li>
</ol>
<p>多态性：Java的一个重要特性</p>
<ol>
<li><p>方法的重载和构造器的重写</p>
</li>
<li><p>对象的多态，子类的对象可以替代父类的对象使用，子类可以看做是特殊的父类，所以父类类型的引用可以指向子类的对象：向上转型，Person e = new Student();</p>
</li>
<li><p>一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能在访问子类中添加的属性，意思就是，如果你声明了Person为你的引用类型，那么就只能访问父类中的属性，哪怕你引用的对象属于子类，Person e = new Student();就像这样，只能使用Person的属性。</p>
</li>
<li><p>虚拟方法调用，编译时e时Person类型，而方法运行时才确定的，所以调用的是Student类中的方法—动态绑定</p>
</li>
<li><p>子类继承父类</p>
<ul>
<li><p>若子类重写了父类的方法，子类里面定义的方法彻底覆盖了父类里的同名方法，那么系统就不会将父类的方法转移到子类中</p>
</li>
<li><p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全一样的实例变量，这个实例变量依然不可能覆盖父类的实例变量</p>
</li>
</ul>
</li>
<li><p><code>instanceof</code> 操作符：检验某个对象是否类A的子类。</p>
</li>
<li><p>Object类：是所有Java的父类，就是多层继承的最高类。Object 设置的形参可以接受任何类作为其参数，作为实例。</p>
</li>
<li><p>对象的类型转换：</p>
<ul>
<li><p>自动类型转换：小数据转换成大数据</p>
</li>
<li><p>强制类型转换：大数据强制转换成小数据，在大数据类型前面加括号写转换的类型</p>
</li>
<li><p>子类到父类的类型可以自动转换</p>
</li>
<li><p>从父类到子类的类型必须通过强制类型转换实现</p>
</li>
<li><p>无继承关系的引用类型间的转换是非法的</p>
</li>
</ul>
</li>
<li><p>操作符与equals方法：</p>
<ul>
<li><p>对于 == 使用比较时，比较的是两边存储数据的地址是否相同，符号两边的数据类型必须兼容（要么相同数据类型，要么可以自动转换的数据类型），否则编译出错</p>
</li>
<li><p>equals():其作用与 == 符号相同；有个特殊情况：对于File , String , Date以及包装类（Wrapper  Class）来说，是比较其内容和类型。不考虑是否引用的同一个对象，原因很简单，在jdk中这些类重写了Object类中的equals()方法。</p>
</li>
</ul>
</li>
<li><p>包装类：将java中八个基本数据类型封装：</p>
<ul>
<li><p>boolean —&gt; Boolean</p>
</li>
<li><p>char —&gt; Character</p>
</li>
<li><p>byte—&gt; Byte</p>
</li>
<li><p>short—&gt; Short</p>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>long—&gt; Long</p>
<ul>
<li><p>int —&gt; Integer</p>
</li>
<li><p>float—&gt; Float</p>
</li>
<li><p>double—&gt; Double</p>
<p>包装被转换：可以进行自动拆箱和自动装箱的</p>
<p>主要作用：基本数据类型与字符串的直接转化</p>
</li>
</ul>
</li>
</ul>
<ol start="11">
<li><p>toString():是父类Object的方法，输出的是当前对象的内存地址，如果你想要输出类的其他信息，重写toString方法。打印m对象相当于执行打印m.toString()。</p>
</li>
<li><p>关键词:static</p>
<ol>
<li>静态变量：不因对象不同而改变，就可以设置为类属性，不用实例化就能够使用的变量类型，类名属性名就可以使用。</li>
</ol>
</li>
<li><p>方法和变量都可以用static修饰，和类属性一样，如果方法不想因对象的不同而频繁通过new对象的方式去调用方法，则这样的方法通常被声明为类方法，简化了方法的调用。工具类的方法可能会常用到建立类方法。</p>
<ol start="3">
<li><p>特点：</p>
<ul>
<li><p>随着类的加载而加载</p>
</li>
<li><p>优先于对象存在</p>
</li>
<li><p>修饰的成员，被所有对象所共享</p>
</li>
<li><p>访问权限允许时（static一般只修饰public的方法），可不创建对象，直接被类调用</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>注意：</p>
<pre><code>- 对于类变量的使用，要慎重，因为这种可以被多有的实例化对象共享的属性，只要一改，就会引起所有类的变化。
- 不能使用this和super，因为static是可以不用实例就能够访问的</code></pre>
</li>
<li><p>单例设计模式：</p>
<p>特点：</p>
<ol>
<li><p>单例类只能有一个实例。　　</p>
</li>
<li><p>单例类必须自己创建自己的唯一实例。</p>
</li>
<li><p>单例类必须给所有其他对象提供这一实例。</p>
<p>种类：懒汉式单例和饿汉式单例</p>
</li>
</ol>
<ul>
<li>饿汉式（就像是吃快餐一样，进来就可以直接吃，直接使用已经创建好的对象）：构造方法的私有化，创建好一个静态的对象供对象或者方法系统使用。</li>
<li>懒汉式（就像是在宿舍生活的我们，一到周末，就呆在宿舍喝泡面，只要第一周开始喝泡面，以后的每周都会和泡面）：最开始是没有对象的，直到有人调用的时候，才new一个对象，之后所有调用该对象的都用这一个对象，存在线程安全问题。</li>
<li>共同点：也就是单例模式的特点，在软件运行时，有且仅有一个实例化对象，参考建立过程：先私有一个化一个构造方法，再私有一个类变量，在创建一个可以被调用的static类方法getInstance()，调用的时候直接调用static类方法就行了</li>
<li>两者区别就在于：对象的创建时间不同</li>
</ul>
</li>
<li><p>代码块</p>
<ol>
<li><p>作用：对Java对象进行初始化</p>
</li>
<li><p>程序的执行顺序：</p>
<ul>
<li><p>成员变量的声明</p>
</li>
<li><p>显示初始化和属性初始化</p>
</li>
<li><p>执行代码块代码（多个代码块，按照程序的编写顺序执行）</p>
</li>
<li><p>执行构造器代码</p>
</li>
</ul>
</li>
<li><p>静态代码块需要使用static修饰的属性和方法，而非静态代码块不用，静态代码块只执行一次，且先于静态代码块，而非静态代码块每次new对象的时候都需要重新执行。</p>
</li>
<li><p>在实际开发中,static静态代码块用在初始化类的静态属性(static类型属性)。在匿名内部类中，可用代码块代替构造方法</p>
</li>
</ol>
</li>
<li><p>关键字：final，修饰声明类，属性和方法</p>
<ol>
<li>修饰类，表明最终的类，不能被继承，提高安全性，提高程序的可读性</li>
<li>修饰方法，表明最终的方法，不能被子类重写、</li>
<li>修饰变量称为常量，名称大写（约定成俗的：全大写，代表常量），且只能被赋值一次。</li>
<li>final static一起修饰变量，就是全局常量</li>
</ol>
</li>
<li><p>抽象类（abstract  class）：</p>
<ol>
<li>用法：用abstract关键字来修饰，既可以修饰方法，又可以修饰类，相应的叫做抽象方法，抽象类。</li>
<li>含有抽象方法的类必须声明为抽象类。</li>
<li>抽象类不能被实例化，是用来作为父类被继承，其子类必须重写父类的方法，其子类仍为抽象类。</li>
<li>不能用abstract修饰属性，私有方法，构造器，静态方法，final的方法</li>
<li>应用：模型化那些父类是无法确定全部实现的，由其子类提供具体实现的对象的类</li>
</ol>
</li>
<li><p>模板方法设计模式：抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展，改造，但子类总体上会保留抽象类的行为方式。</p>
</li>
<li><p>关键字：interface（接口）</p>
<ol>
<li><p>接口是抽象方法和常量值的定义的集合</p>
</li>
<li><p>接口是为了实现多重继承的效果</p>
</li>
<li><p>接口是种特殊的抽象类，这种抽象类中只包含常量的方法的定义，而没有变量和方法的实现</p>
</li>
<li><p>接口的出现：需要的稳定的抽象父类，如果父类需要修改的话，子类也会跟着受到影响（解决方法：要么实现父类修改的方法，要么将子类一样改成抽象类），但有时我们需要给父类增加方法，就不能直接从父类的方法上修改，只能新建一个接口，在接口上扩展方法，让子类自行去实现接口中的方法。</p>
</li>
<li><p>接口类的实现：</p>
<ul>
<li>class SubClass implements Interface{}</li>
<li>一个类可以实现多个接口，接口也可以继承其他接口</li>
</ul>
</li>
<li><p>接口的特点：</p>
<ul>
<li>用interface来定义</li>
<li>接口中的所有成员变量的都是默认由public static final修饰的，也就是全局变量</li>
<li>接口中的所有方法都是默认由public abstract修饰的</li>
<li>接口没有构造器</li>
<li>接口采用多层继承机制 </li>
<li>实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。</li>
<li>接口的主要用途就是被实现类实现。（面向接口编程）</li>
<li>与继承关系类似，接口与实现类之间存在多态性</li>
<li>定义Java类的语法格式：先写extends，后写implements</li>
<li>​    &lt; modifier&gt; class &lt; name&gt; [extends &lt; superclass&gt;]<br>​    [implements &lt; interface&gt; [,&lt; interface&gt;]* ] {<br>​        &lt; declarations&gt;*<br>​    }</li>
<li>总结：<ul>
<li>抽象类是对于一类事物的高度抽象，其中既有属性也有方法接口是对方法的抽象，也就对一系列动作的抽象</li>
<li>当需要对一类事物抽象的时候,应该是使用抽象类,好形成一个父类</li>
<li>当需要对—系列的动作抽象，就使用接口，需要使用这些动作的类去实现相应的接口即可</li>
</ul>
</li>
</ul>
</li>
<li><p>练习题：<img src="D:\blog\myblog\source\post-img\image-20201123143826041.png" alt="image-20201123143826041" style="zoom: 50%;" /><img src="D:\blog\myblog\source\post-img\image-20201123143851537.png" alt="image-20201123143851537" style="zoom:50%;" /><img src="D:\blog\myblog\source\post-img\image-20201123143945587.png" alt="image-20201123143945587" style="zoom:50%;" /></p>
</li>
<li><p>设计模式：工厂方法（Factory Method）:通过工厂把new对象给隔离开，通过产品的接口可以接受不同世纪产品的实现类，实例的类名的改变不影响其他合作开发人员的编程。（为创建对象提供过渡接口，以便将创建对象的具体过程屏蔽隔离起来，达到提高灵活性的目的。 ）</p>
</li>
<li><p>类的成员：内部类用法：</p>
<ol>
<li><p>可以声明为final的</p>
</li>
<li><p>和外部类不同，Inner class可声明为private或protected；</p>
</li>
<li><p>Inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量；</p>
</li>
<li><p>Inner class作为类：</p>
<p>可以声明为abstract类 ，因此可以被其它的内部类继承</p>
</li>
<li><p>注意：非static的内部类中的成员不能声明为static的，只有在外部类或static的内部类中才可声明static成员。</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<pre><code>内部类的作用：解决java中的不能多重继承的问题

10. 面向对象总结：    &lt;img src=&quot;D:\blog\myblog\source\post-img\image-20201123160632596.png&quot; alt=&quot;image-20201123160632596&quot; style=&quot;zoom:150%;&quot; /&gt;

11. java异常

    - ```java
      java.lang.ArrayIndexOutOfBoundsException数组越界
      java.lang.NullPointerException空指针异常
      java.lang.ArithmeticException算术异常
      &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - &amp;lt;img src&amp;#x3D;&amp;quot;D:\blog\myblog\source\post-img\image-20201124084652443.png&amp;quot; alt&amp;#x3D;&amp;quot;image-20201124084652443&amp;quot; style&amp;#x3D;&amp;quot;zoom: 50%;&amp;quot; &amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - 异常处理机制：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - Java提供的是异常处理的抓抛模型（也就是try...catch..）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - 如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - 程序员通常只能处理Exception，而对Error无能为力。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - try catch是为了防止程序可能出现的异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            在捕获异常的代码块中（try&amp;#123;&amp;#125;里的代码），如果前面的代码有异常了，就不会执行后面的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - 一般只写一个try catch结构&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - catch（）中，如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类Exception作为catch的参数。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - 捕获异常：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - 与其它对象一样，可以访问一个异常对象的成员变量或调用它的方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - getMessage( ) 方法，用来得到有关异常事件的信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            - printStackTrace( )用来跟踪异常事件发生时执行堆栈的内容。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          -  finally：不论在try、catch代码块中是否发生了异常事件，finally块中的语句都会被执行。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - finally语句是可选的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - 抛出异常：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - ​    public void readFile(String file)  throws FileNotFoundException &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ​        ……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ​        &amp;#x2F;&amp;#x2F; 读文件的操作可能产生FileNotFoundException类型的异常&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ​        FileInputStream fis &amp;#x3D; new FileInputStream(file);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ​         ..……&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ​     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - 重写方法不能抛出比被重写方法范围更大的异常类型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要人工创建并抛出&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          - java提供的异常的类一般是够用的，只有特殊的情况可能需要自己编写异常类，这种情况很少见&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21. Java集合&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1. HashSet()：就像是jdk自带的类，写好的算法一样，调用的是系统设定好的属性和方法来实现自己想要的功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       - 特点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         1. 不能保证元素的排列顺序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         2. 不可重复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         3. HashSet 不是线程安全的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         4. 集合元素可以使 null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        - 使用Iterator循环遍历集合元素：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
      Iterator it = set.iterator();

      while(it.hasNext())&#123;
         System.out.println(it.next());
      &#125;
      &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- foreach循环遍历集合元素（主要使用）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
      for(Object obj : set)&#123;//这个的意思是把set的每一个值取出来，赋值给obj，直到循环set的所有值
         System.out.println(obj);
      &#125;
      &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 泛型：让集合只能存同样类型的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
    Set&lt;String&gt; set1 = new HashSet&lt;String&gt;();//比如指定String为集合的泛型，那么这个集合不能存String类型之外的数据
    &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22. TreeSet()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1. 特点：自然排序，和HashSet的遍历方法一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2. 使用：必须放入同样类的对象.(默认会进行排序) 否则可能会发生类型转换异常.我们可以使用泛型来进行限制，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    3. 定制排序：如果需要实现定制排序，则需要在创建 TreeSet 集合对象时，提供一个 Comparator 接口的实现类对象。然后再重compare方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23. List集合&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1. 特点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - List 代表一个元素有序、且可重复的集合，集合中的每个元素都有其对应的顺序索引&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - List 允许使用重复元素，可以通过索引来访问指定位置的集合元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - List 默认按元素的添加顺序设置元素的索引。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      - List 集合里添加了一些根据索引来操作集合元素的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2. 使用：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;List&amp;lt;String&amp;gt; l &amp;#x3D; new ArrayList&amp;lt;String&amp;gt;();&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;System.out.println(list.get(2));&amp;#x2F;&amp;#x2F;通过索引来访问指定位置的集合元素&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;list.add(1,&amp;quot;f&amp;quot;);&amp;#x2F;&amp;#x2F;在指定索引下标的位置插入数据&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;list.addAll(2, list);&amp;#x2F;&amp;#x2F;在指定索引下标的位置插入集合&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;System.out.println(list.indexOf(&amp;quot;d&amp;quot;));&amp;#x2F;&amp;#x2F;获取指定元素在集合中第一次出现的索引下标&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;System.out.println(list.lastIndexOf(&amp;quot;d&amp;quot;));&amp;#x2F;&amp;#x2F;获取指定元素在集合中最后一次出现的索引下标&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;list.remove(2);&amp;#x2F;&amp;#x2F;根据指定的索引下标移除元素&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;list.set(1, &amp;quot;ff&amp;quot;);&amp;#x2F;&amp;#x2F;根据指定的索引下标修改元素&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#96;List&amp;lt;String&amp;gt; sublist &amp;#x3D;  list.subList(2, 4);&amp;#x2F;&amp;#x2F;取索引下标在大于等于2小于4的元素&amp;#96;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ArrayList 和 Vector 是 List 接口的两个典型实现,但一般不使用Vector&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24. Map集合：Map 用于保存具有映射关系的数据，因此 Map 集合里保存着两组值，一组值用于保存 Map 里的 Key，另外一组用于保存 Map 里的 Value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      1. 使用方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;img src&amp;#x3D;&amp;quot;D:\blog\myblog\source\post-img\image-20201127200240743.png&amp;quot; alt&amp;#x3D;&amp;quot;image-20201127200240743&amp;quot; style&amp;#x3D;&amp;quot;zoom: 80%;&amp;quot; &amp;#x2F;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         实例：    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
     map.put(&quot;b&quot;, 1);//添加数据
     System.out.println(map.get(&quot;b&quot;));//根据key取值
     map.remove(&quot;c&quot;);//根据key移除键值对
     System.out.println(map.size());//map集合的长度
     System.out.println(map.containsKey(&quot;a&quot;));//判断当前的map集合是否包含指定的key
     System.out.println(map.containsValue(10));//判断当前的map集合是否包含指定的value
     map.clear();//清空集合
     Set&lt;String&gt; keys = map.keySet();//获取map集合的key的集合
     map.values();//获取集合的所有value值
     //遍历map集合,通过map.keySet();
     for(String key : keys)&#123;
                 System.out.println(&quot;key: &quot; + key + &quot;, value: &quot; + map.get(key));
             &#125;
     //通过map.entrySet();遍历map集合
             Set&lt;Entry&lt;String, Integer&gt;&gt; entrys = map.entrySet();
             for(Entry&lt;String, Integer&gt; en : entrys)&#123;
                 System.out.println(&quot;key: &quot; + en.getKey() + &quot;, value: &quot; + en.getValue());
             &#125;
     &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Treemap的自然排序是字典排序；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25. Collection&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1. 使用方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ![image-20201127202926210](D:\blog\myblog\source\post-img\image-20201127202926210.png)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    2. 实例：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
       Collections.reverse(list);//反转 List 中元素的顺序
       Collections.shuffle(list);//对 List 集合元素进行随机排序
       Collections.sort(list);//list集合字典升序排序
       System.out.println(Collections.frequency(list, &quot;x&quot;));//返回指定集合中指定元素的出现次数
       Collections.replaceAll(list, &quot;b&quot;, &quot;bb&quot;);//使用新值替换 List 对象的所有旧值
       Collections.swap(list, 0, 4);//将指定 list 集合中的 i 处元素和 j 处元素进行交换
       Collections.sort(stus, new Student());//根据指定的 Comparator 产生的顺序对 List 集合元素进行排序
       &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. Comparator类中的compare方法的重写：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
   @Override
   public int compare(Student o1, Student o2) &#123;//根据年龄升序排列对象
      if(o1.age &gt; o2.age)&#123;
         return 1;
      &#125;else if(o1.age &lt; o2.age)&#123;
         return -1;
      &#125;else&#123;
         return 0;
      &#125;
   &#125;
   &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25. 泛型：为了解决数据类型安全问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    1. 用法：一般在编译期能够发现问题的类，当然，只会在编译阶段有效，泛型信息不会进入到运行时阶段。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
   A&lt;String&gt; a1 = new A&lt;String&gt;();//在new A的对象指定泛型的类型String
   a1.serKey(&quot;xxxx&quot;);//对象使用serKey(T key)方法，中的key形参就是String
   String s = a1.getKey();//T getKey()，返回值就有new对象确定返回值是String
   A a3 = new A();//不指定泛型，相当于指定了一个Object类型
       //同样的类，但是在new对象时泛型指定不同的数据类型，这些对象不能互相赋值
   &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. 泛型的接口：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
    如果实现接口时指定接口的泛型的具体数据类型
    这个类实现接口所有方法的位置都要泛型替换实际的具体数据类型
    未传入泛型实参时，与泛型类的定义相同，在声明类的时候，需将泛型的声明也一起加到类中
   &lt;!--hexoPostRenderEscape:&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3. 泛型方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;:hexoPostRenderEscape--&gt;
   Cc&lt;Object&gt; c = new Cc&lt;Object&gt;();
   c.test(&quot;xxx&quot;);
   //泛型方法，在调用之前没有固定的数据类型
   //在调用时，传入的参数是什么类型，就会把泛型改成什么类型
   //也就是说，泛型方法会在调用时确定泛型距离数据类型
   Integer i = c.test1(2);//传递的参数是Integer，泛型就固定成Integer，返回值就是Integer
   Boolean b = c.test1(true);//传递的参数是Boolean，泛型就固定成Boolean，返回值就是Boolean
   ```</code></pre>
<p>​            4. 泛型通配符：</p>
]]></content>
      <categories>
        <category>学习知识</category>
      </categories>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/year/11/03/JavaEE%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>    &lt;h1&gt;&lt;a name=&quot;t0&quot;&gt;&lt;/a&gt;&lt;a name=&quot;t0&quot;&gt;&lt;/a&gt;&lt;a id=&quot;Servlet__0&quot;&gt;&lt;/a&gt;一、Servlet 简介&lt;/h1&gt; </code></pre>
<p>先把 Servlet 当作一个普普通通的 Java 函数，来看一段最简单的样例代码。</p> 
<pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token comment">// 导入相关的包</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span>
<span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span>

<p> <span class="token comment">// 继承 HttpServlet 类</span><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;<!-- --></span><br>    <span class="token comment">//重写对应用户get请求的doGet()方法，在其中加入我们需要的功能</span><br>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span><br>            HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">&#123;<!-- --></span><br>        <span class="token keyword">try</span> <span class="token punctuation">&#123;<!-- --></span><br>            <span class="token comment">//在给浏览器的响应 response 中写入一句 html</span><br>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">“&lt;h1&gt;Hello Servlet!&lt;/h1&gt;”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;<!-- --></span><br>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        <span class="token punctuation">&#125;</span><br>    <span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li></ul></pre> 
<p>上述代码实现的功能是，当用户通过浏览器访问该 Servlet 对应的路径时，服务器端返回一个响应，其内容是一条能够在浏览器上被解析的 HTML 语句 <code>&lt;h1&gt;Hello Servlet!&lt;/h1&gt;</code>。</p> 
<p>可以看出，<code>doGet</code> 方法中实现了我们想要的功能，是我们重点要关注的部分。根据用户提交方式的不同，我们还可以重写 <code>doPost</code> 方法。（重写 <code>service</code> 也可，但会导致不能调用 <code>doGet</code> 和 <code>doPost</code>，一般不建议这么做）</p> 
<p>接下来，让我们来看看该如何理解 Servlet。</p> 
<h2><a name="t1"></a><a name="t1"></a><a id="1__Servlet_32"></a>1 如何理解 Servlet</h2> 
<ul><li><strong>Servlet = Server + Applet（Applet，小程序）</strong></li><li>Servlet 是运行在 Web 服务器或应用服务器上的 <strong>Java "小"程序</strong>。</li><li>使用 Servlet，可以收集来自网页表单的用户输入并处理，呈现来自数据库或者其他源的记录，即<strong>与用户交互</strong>。</li><li>Servlet 可以动态地生成网页</li><li>广义的 Servlet 指任何实现了 Servlet 接口的 Java 程序。</li><li>Servlet 是学习 JSP 的基础。</li><li>Servlet 在 网络中所处的位置如下 ：<br> <img src="https://img-blog.csdnimg.cn/20190403133817498.PNG" alt="在这里插入图片描述"></li></ul> 
<h2><a name="t2"></a><a name="t2"></a><a id="2_Servlet__42"></a>2 Servlet 的生命周期</h2> 
<ol><li>当 Servlet 第一次被调用的时候，其实例会被装在内存中。这个过程只会进行一次。</li><li>Servlet 的 service 函数将被调用。</li><li>在之后的访问中，service 函数直接被调用。</li><li>当 web 应用 reload 或者服务器被关闭时，Servlet 的实例被销毁。</li></ol> 
<h1><a name="t3"></a><a name="t3"></a><a id="_Servlet__48"></a>二、实战：开发 Servlet 程序</h1> 
<p>下面我们来做一个完整的例子，来展示 Servlet 如何对前端提交的数据进行处理。（使用 IntelliJ IDEA + Tomcat 服务器进行开发）</p> 
<h2><a name="t4"></a><a name="t4"></a><a id="1__Java__50"></a>1 创建 Java 项目</h2> 
<p>打开 IDE ，File-&gt;New-&gt;Project，选择 Java Enterprise，并勾选 Web Application，点击 next，把项目命名为 MyServlet。<br> <img src="https://img-blog.csdnimg.cn/20190403133928779.PNG" alt="在这里插入图片描述"><br> 由于之前我已经配置好了 tomcat 服务器，所以这里可以直接使用。没有配置过的小伙伴可以参考</p> 
<p>http://how2j.cn/k/idea/idea-tomcat/1361.html?p=50613</p> 
<p>这里不再赘述。</p> 
<h2><a name="t5"></a><a name="t5"></a><a id="2_servletapijar_59"></a>2 导入必须的servlet-api.jar包</h2> 
<p>开发 Servlet 需要用到 servlet-api.jar 这个包里的相关类。</p> 
<p>servlet-api.jar 包位于 \tomcat\lib\servlet-api.jar<br> (我的路径为 D:\apache-tomcat-9.0.10\lib\servlet-api.jar)</p> 
<p>IDEA 中配置好 tomcat 后这个包是自动导入的，如果没有，可以在左侧点击 External Libraries -&gt; Tomcat，在 servlet-api 上右键，选择 Add as Library 即可。</p> 
<h2><a name="t6"></a><a name="t6"></a><a id="2__html__67"></a>2 编写 html 页面</h2> 
<p>在工程的 web 目录下，右键 New 一个 HTML 文件，名字叫 <code>test-servlet</code> ，内容为</p> 
<pre class="prettyprint"><code class="prism language-html has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token doctype">&lt;!DOCTYPE html&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>测试 Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<p><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">“</span>test<span class="token punctuation">“</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">“</span>post<span class="token punctuation">“</span></span><span class="token punctuation">&gt;</span></span><br>    开发者： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">“</span>text<span class="token punctuation">“</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">“</span>developer<span class="token punctuation">“</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><br>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">“</span>submit<span class="token punctuation">“</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">“</span>提交<span class="token punctuation">“</span></span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><br><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li></ul></pre> 
<p>主要的结构是一个 <code>form</code>，作用是把开发者这一信息提交到 <code>/test</code> 路径。这个 <code>/test</code> 路径，要通过接下来的配置与 <code>Servlet</code> 关联起来。</p> 
<h2><a name="t7"></a><a name="t7"></a><a id="3__Servlet_85"></a>3 编写 Servlet</h2> 
<p>先在左侧资源管理器中 src 目录下右键 New 一个文件夹，命名为 servlet，再在这个新文件夹下创建一个 Servlet ，命名为 FirstServlet。当然也可以选择创建 Java Class，但是创建 Servlet，IDE 会自动提供代码框架如下：</p> 
<pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span>

<p><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><br><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span></p>
<p><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">“TestServlet”</span><span class="token punctuation">)</span><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;<!-- --></span><br>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;<!-- --></span></p>
<pre><code>&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;doGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HttpServletResponse response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throws&lt;/span&gt; ServletException&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; IOException &lt;span class=&quot;token punctuation&quot;&gt;&#123;&lt;!-- --&gt;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre>
<p><span class="token punctuation">}</span></p>
<div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li><li style="color: rgb(153, 153, 153);">19</li></ul></pre> 
<p>对应 HTTP 标准请求的 <code>doGet</code>、<code>doPost</code> 方法，继承自 <strong>javax.servlet.http.HttpServlet</strong> ，我们的业务逻辑需要写在这里。</p> 
<p>此外，也可以重写 <code>service</code> 方法，这样做会使 <code>doGet</code> 和 <code>doPost</code> 失效。<code>service</code> 方法的形式与它们一致，为：</p> 
<pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;<!-- --></span>

<pre><code>&lt;span class=&quot;token punctuation&quot;&gt;&#125;&lt;/span&gt;</code></pre>
<div class="hljs-button {2}" data-title="复制" data-report-click="{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li></ul></pre> 
<p>前面我们编写的 test-servlet.html 中，提交的方法指定为 post，所以我们只需要重写 <code>doPost</code> 方法：</p> 
<pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;<!-- --></span>
    String developer <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"developer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎开发者"</span> <span class="token operator">+</span> developer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li></ul></pre> 
<p>作用是获取提交过来的 <code>developer</code> 参数，并把欢迎语句以 <code>UTF-8</code> 编码输出到客户端。</p> 
<p>完整的代码如下：</p> 
<pre class="prettyprint"><code class="prism language-java has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">package</span> servlet<span class="token punctuation">;</span>

<p><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletException<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServlet<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><br><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><br><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span></p>
<p><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">“TestServlet”</span><span class="token punctuation">)</span><br><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;<!-- --></span><br>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">&#123;<!-- --></span><br>        String developer <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">“developer”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">“text/html; charset=UTF-8”</span><span class="token punctuation">)</span><span class="token punctuation">;</span><br>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">“欢迎开发者”</span> <span class="token operator">+</span> developer<span class="token punctuation">)</span><span class="token punctuation">;</span><br>    <span class="token punctuation">&#125;</span><br><span class="token punctuation">&#125;</span></p>
<div class="hljs-button &#123;2&#125;" data-title="复制" data-report-click="&#123;&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;&#125;"></div></code><ul class="pre-numbering" style=""><li style="color: rgb(153, 153, 153);">1</li><li style="color: rgb(153, 153, 153);">2</li><li style="color: rgb(153, 153, 153);">3</li><li style="color: rgb(153, 153, 153);">4</li><li style="color: rgb(153, 153, 153);">5</li><li style="color: rgb(153, 153, 153);">6</li><li style="color: rgb(153, 153, 153);">7</li><li style="color: rgb(153, 153, 153);">8</li><li style="color: rgb(153, 153, 153);">9</li><li style="color: rgb(153, 153, 153);">10</li><li style="color: rgb(153, 153, 153);">11</li><li style="color: rgb(153, 153, 153);">12</li><li style="color: rgb(153, 153, 153);">13</li><li style="color: rgb(153, 153, 153);">14</li><li style="color: rgb(153, 153, 153);">15</li><li style="color: rgb(153, 153, 153);">16</li><li style="color: rgb(153, 153, 153);">17</li><li style="color: rgb(153, 153, 153);">18</li></ul></pre> 
<h2><a name="t8"></a><a name="t8"></a><a id="4__webxml_155"></a>4 配置 web.xml</h2> 
<p>在 WEB-INF 目录中打开 web.xml（如果没有可以右键手动创建），进行配置如下：</p> 
<pre class="prettyprint"><code class="prism language-xml has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">"</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3.1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

<p>​    </p>
<p><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></p>
]]></content>
  </entry>
  <entry>
    <title>硅谷十步学习法</title>
    <url>/year/09/01/%E7%A1%85%E8%B0%B7%E5%8D%81%E6%AD%A5%E5%AD%A6%E4%B9%A0%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><p>John Z. Sonmez：</p>
<blockquote>
<p>“Simple Programmer”网站的创始人，他不辞辛劳地追求着“将复杂问题转化为简单解决方案”的梦想</p>
</blockquote>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>本学习法摘自《软技能 代码之外的生存指南》一书，关于这本书中提到的学习方法，我个人有一些深刻体会。我是一个不太相信别人创造的方法论的人，但我同时是一个缺乏方法论支撑的人，这个学习方法可以快速让你找到学习编程的感觉，后面会摘抄一些原文来让你体会一下。</p>
<blockquote>
<p>人到了一定阶段，会感觉自己需要突破而力不从心，从技术上来讲，也许是你一贯的思考方式或者是行为习惯有一些需要改进的地方，拥抱变化进行改进，才能让你进一步突破思维定势、指数级扩大知识面、增强客观行为能力等等，但千万不要认为这种力不从心是你看到了天花板，回想一下，五年前你能想到现在的生活是如此这般么？永远不要低估自己，要时刻思考改变。时刻改变并不是我们认为的浮躁，而是坚持永恒的改变，这点非常难，而在改变的过程中，学会找到哪些是不变的却是更难的。今天你所拥有的技能在不久的将来就会被淘汰掉，你是否会觉得恐惧？有些人则异常相信自己所拥有技能其背后有强大的平台支撑，每天在安慰自己不必惊慌失措，其实在技术发展日益加速的现在，没有人能一招鲜吃遍天，学科交叉越来越多，需要学习的新东西层出不穷，学习的方法对你来说有改进的地方吗？你的效率如何？知识面有多广？技术研究有多深？试错成本有多高？如果你觉得一个人的精力是有限的，这位同学，我们来查一查Donald Knuth，我来给你讲讲他的事迹。世界在变化，技术在变化，不变的是你的学习能力，而学习能力的实体则是学习方法！</p>
</blockquote>
</blockquote>
<p><img src="https://s1.ax1x.com/2020/09/06/wZ52O1.jpg" alt="图片"></p>
<h1 id="十步学习法发明"><a href="#十步学习法发明" class="headerlink" title="十步学习法发明"></a>十步学习法发明</h1><h2 id="发明者背景"><a href="#发明者背景" class="headerlink" title="发明者背景"></a>发明者背景</h2><p>  多年以来，我都承受着巨大的压力：快速学习新技术、新编程语言、新框架和其他能力。通常，这种压力是我自己造成的，我总是投入新事物，结果力不从心。但是，即便不考虑压力来源，这也迫使我开发出一个可重复使用的自学体系。在接下来的几章里，我会带你了解我自创的进行快速学习的“十步学习法”。让我们先从了解这个体系的确切含义及其工作原理开始。</p>
<h2 id="体系背后的逻辑"><a href="#体系背后的逻辑" class="headerlink" title="体系背后的逻辑"></a>体系背后的逻辑</h2><p>  在我职业生涯的早年间，我学习知识的主要途径就是 “从封面到封底 ”仔细阅读专著 。只有通读全书后我才会将自己学到的知识应用于实践 。使用这个方法，我发现，我确实能学到东西 ，但是效率很低，我还得经常回顾书的内容 ，来弥补自己在该学科方面存在的知识短板 。当我拥有足够的时间，且没有一个真实具体的目标的时候 ，这种学习方法很好。我最终学会了我想要学习的东西 ，而且从头到尾地读书学东西也并不难 ，只是要花时间。</p>
<p>  随着我开始有更紧迫的理由需要快速学习 ，我发现自己原来的方法就无法奏效了 。通常 ，我并没有时间通读全书 ，而且我也发现书本里的很多内容更适合作为参考资料 ，而不适合实际学习 。于是 ，我迫使自己去寻找更好的自学方法 ，能在有限的时间内掌握所需内容 。有些时候 ，我只有一周甚至更少的时间去吸收足够的信息以教给别人 。我发现在这种情况下 ，我很自然地会先明确需要掌握哪些内容 ，再去寻找我能获得这些信息的最佳资源 ，同时也会忽略那些并非达成目标所必需的其他信息 。我发现 ，为了能够掌握一门技术 ，我需要了解以下三个要点 。</p>
<blockquote>
<ol>
<li>如何开始 ——要想开始使用自己所学的 ，我需要掌握哪些基本知识 ？</li>
<li>学科范围 ——我现在学的东西有多宏大 ？我应该怎么做 ？在开始阶段 ，我不需要了解每个细节 ，但是如果我能对该学科的轮廓有大致的了解 ，那么将来我就能发现更多细节 。</li>
<li>基础知识 ——不止在开始阶段 ，要想使用一项特定的技术 ，我需要了解基本的用户案例和最常见的问题 ，也需要知道自己学的哪 20 %就能满足 80 %的日常应用 。</li>
</ol>
</blockquote>
<p> 熟知了这三个关键点后 ，我可以高效地学习一门技术 ，无需通晓全部细节 。我发现 ，如果我了解三项主题 ——如何开始 ，我能做什么 ，以及相关基础知识 ，那么我就能随着学习深入学会所需的其他知识 。 如果我想提前掌握所有知识 ，那只是在浪费时间 ，因为真正重要的内容会湮没在那些细枝末节中 。 这种新方法能让我关注重点 。当我确实需要了解更多细节时 ，我可以利用参考资料来弥补这些不足 。有多少次你从头到尾仔细阅读一本技术书籍 ，却发现自己实际用到的也只是书里介绍的技术的一小部分 ？使用这种方法 ，我在很短的时间内学会了 G o语言 ——仅仅几个星期而已 。我专注于学习如何尽快用 G o语言写代码 。很快我就对这门编程语言以及它有哪些可用的库有了一个大致的了解 。我希望对这门语言能做什么能有一个整体的了解 。最后 ，我完成并掌握了基础知识 。当我需要深入了解时 ，我只需要在这些基础知识的基础上进行扩展 。</p>
<h1 id="十步学习法体系"><a href="#十步学习法体系" class="headerlink" title="十步学习法体系"></a>十步学习法体系</h1><p>  事实证明 ，掌握这三大要点可不像看上去那么轻松 。学会 “如何开始学习一门技术 ”可以说是一项挑战 ，而且往往很难找出那些所谓的 “篇幅只占20% 、然而有效性却达到80% ”的内容 。另外 ，我经常发现 ，要总结出一门技术的应用广泛程度的简短描述 ，是很难的 。通常你需要阅读一整本甚至几本不同的书籍之后才能获得此信息 。为了解决这些问题 ，我又提前做功课 ，确保自己能够找出自己所需的信息 ，并以最合理的方式将它们组织起来 ，实施落地 。 “十步学习法 ”的基本思想就是 ：要对自己要学的内容有个基本的了解 ——了解自己不知道什么就足矣 。然后 ，利用这些信息勾勒出学习的范围 ，即需要学哪些内容 ，以及学成之后又会获得什么 。依靠这些知识 ，你可以找出各种资源 （不局限于书 ）来帮助自己学习 。最后 ，你可以创建自己的学习计划 ，列出要去学习哪些相关课程 ，筛选学习材料 ，只保留能帮助自己达成目标的优质内容 。一旦完成这些工作 ，你对自己要学什么和怎样学都了然于胸 ，你就可以把控自己的学习计划中的每个关键点 ，通过 “学习 —实践 —掌握 —教授 ” （ L e a r n i n g , D o i n g , L e a r n i n g a n d T e a c h i n g ， L D L T ）的过程 ，获得对该学科的深刻理解 ，同时你也向着自己的目标前进 。</p>
<p>  “十步学习法 ”的第一部分是研究 ，它是一次性完成的 。 但是从第 7步到第 1 0步则是重复的过程 ，贯穿于你的学习计划的各个模块 。这个方法非常奏效 ，因为它迫使你提前明确自己的学习目标 ，也持续不断的激励你通过实践 （而不仅仅是读书或听讲座 ）向着目标前进 。</p>
<p><img src="https://www.icode9.com/img/l/?n=20&i=blog/2002005/202008/2002005-20200822013520466-1373540584.png" alt="总体研究"></p>
<p>接下来的几章 ，我们将介绍该方法的实际操作步骤 。你可以根据自己的情况对该方法进行裁剪 ，去掉你不喜欢或者认为无效的部分 ，保留对你有用的部分 。最终 ，你一定会找到适合自己的自学方法 ，而你的未来将仰仗于它 。</p>
<h1 id="十步学习法"><a href="#十步学习法" class="headerlink" title="十步学习法"></a>十步学习法</h1><blockquote>
<p><strong>采取行动</strong></p>
<p>挑选一项你已经烂熟于胸的技术 ，看看你能否明确以下几点 。</p>
<blockquote>
<ol>
<li>如何开始使用它？</li>
<li>该技术应用广度如何？</li>
<li>利用你需要知道的20%发挥出80%的功效</li>
</ol>
</blockquote>
</blockquote>
<h2 id="第一步到第六步：这些步骤只需做一次"><a href="#第一步到第六步：这些步骤只需做一次" class="headerlink" title="第一步到第六步：这些步骤只需做一次"></a>第一步到第六步：这些步骤只需做一次</h2><p>  对于 “十步学习法 ”的前六个步骤 ，你需要集中精力完成足够多的前期调研 ，确保自己明确知道要学哪些内容 ，以及如何确认自己已达成目标 。你还将学到如何挑选最好的资源来帮自己实现目标 、制订学习计划 。这六个步骤只需要针对你想学的每个主题做一次 。第 7步到第 1 0步则要针对在第 5步所制订的学习计划中的每个模块循环往复 。 尽管第 1步到第 6步只需做一次 ，但是它们却是最重要的步骤 ，因为它们将对你未来的成败起决定性作用 。在这六个步骤中 ，你要为自己实际的学习主题做好一切准备工作 。 “不积跬步无以至千里 ” ，基础打得越牢固 ，目标越容易实现 。</p>
<h3 id="第一步：了解全局"><a href="#第一步：了解全局" class="headerlink" title="第一步：了解全局"></a>第一步：了解全局</h3><p>​    学习始终是一项棘手的任务 ，因为在开始学习某些东西的时候 ，你对自己到底要学什么理解得并不透彻 。</p>
<p>​    美国前国防部长唐纳德 ·拉姆斯菲尔德曾说过 “未知之未知 ” （  unknown unknowns ） ，即你根本不知道自己不知道 。 大多数开发人员在打开一本新书开始阅读的时候 ，他们对自己所不知的一无所知 。他们将 “未知之未知 ”留到后面去发现 。 这一方法的问题在于 ，你要么学非所需 ，要么力所不及 。在深入探究某个主题之前至少要对其有所了解 ，这一点非常重要 。这样你才能弄清自己到底要学什么 ，找出最好的学习方式 。 </p>
<p>​    在这一步 ，你要做的就是了解自己将要学习的主题的全局 。这个主题宏观上什么样 ？你能从中学到足够丰富的知识以了解自己所不知道的吗 ？以及自己所不知道的有多少 ？ 假设你想学习数码摄影 。你可能会先在网上搜索与这个主题相关的内容 ，浏览与数码摄影有关的博客和文章 。短短几小时之内你就能对这个主题的全局及现有的子课题有一个清晰的认识 。 </p>
<p>​    要完成这一步 ，你需要对自己想要学的课题做一些基础性研究 。通常你可以使用网络搜索来完成大部分研究 。如果你碰巧有一本关于该主题的书 ，那么你就可以只读一下其中的介绍性章节 ，粗略浏览一下内容 ，但是不要在这一步上花费太多时间 。记住 ，我们在这一步的目的不是要掌握该主题 ，只是对这一主题的相关内容有一个全局性的了解 。</p>
<h3 id="第二步：确定范围"><a href="#第二步：确定范围" class="headerlink" title="第二步：确定范围"></a>第二步：确定范围</h3><p>​    现在 ，你至少对自己的学习主题及其全局有了一个大致的了解 。下一步就是集中精力去明确自己到底要学什么 。在任何项目中 ，明确项目的范围都是至关重要的 ，唯有这样才能了解项目的全局 ，做好相应的准备工作 。与此相比 ，学习并没有什么不同 。让我们继续你要学数码摄影这一例子 。此时 ，你想要理解的是 “这一主题到底有多大 ” ，以及 “如何将其分解为更小的范围 ” 。在一定的时间内 ，你不可能掌握关于数码摄影的一切知识 ，所以你需要决定学习的重点和学习的范围 。如果你想了解如何拍摄人像照片 ，那这就是你的学习范围 。在学习过程中 ，大家很容易犯的一个错误就是试图解决太大的问题而把自己搞得不堪重负 。例如 ，试图全面掌握物理学是不切实际的 ，因为这一主题太过庞大 ，也不够聚焦 。你不可能在有限的时间里学会与物理学有关的一切 ——穷尽一生也不可能 。因此 ，你要明确自己的学习范围 。为此 ， 你需要运用自己在上一步中获得的信息 ，让自己的关注点落脚到更小也更可控的范围 。 让我们看看下面的表 ，看如何将庞大的主题分解为小而聚焦的主题 。</p>
<table>
<thead>
<tr>
<th>初始的主题</th>
<th align="left">可以分解为子主题</th>
</tr>
</thead>
<tbody><tr>
<td>学习C#</td>
<td align="left">学习C#语言的基础知识，掌握如何创建一个简单的控制台程序</td>
</tr>
<tr>
<td>学习Java</td>
<td align="left">学习Java的基础知识，掌握如何利用Java编写一个程序</td>
</tr>
<tr>
<td>学习Linux</td>
<td align="left">了解如何设置和安装Ubuntu Linux，以及如何使用它的基本特性</td>
</tr>
</tbody></table>
<p>​    在上面的例子中 ，是如何将类似 “学习 C # ”这样的宏大主题缩小并聚焦到一个特定范围内的 。我们从一个几乎无边界的主题中明确了一个清晰且聚焦的范围 。 你还会注意到 ，在这一步中 ，我们还为学习添加了一个理由 ，从而将其限定在一个范围明确的主题内 。 例如 ，你想学习Java ，而Java可以实现的东西很多，要明确自己想要学到什么程度，学到哪里才算满意。阐述学习的理由能够帮你明确学习范围 ，因为人们通常是为一些特殊的理由才去学一些东西的 。</p>
<p>​     在这一步中 ，你可以充分利用自己在第 1步中收集到的信息 ，找出自己的学习范围 。同时也可以借助自己的学习理由来决定学习的范围 。在此过程中 ，你可能会受到诱惑 ，为了学习该主题下的不同子主题 ，你可能会扩张你的学习范围而不够聚焦 ，但是请务必抵制住这个诱惑 ，尽可能地保持专注 。你一次只能学一样东西 。你可以稍后再回头学习别的分支领域 ，但就目前而言 ，选择一个专注而聚焦的范围 ，潜心学习吧 。最后 ，在这一步中一定要注意 ：明确学习范围的时候要考虑时间因素 。如果你只有一周时间 ，你需要本着实事求是的态度确定自己能在这段时间内学到什么 。如果你有几个月的时间 ，你也许能攻克一个更大的主题 。你的学习范围务必大小适当 ，既能符合你的学习理由 ，又能符合你的时间限制 。</p>
<h3 id="第三步：定义目标"><a href="#第三步：定义目标" class="headerlink" title="第三步：定义目标"></a>第三步：定义目标</h3><p>​    在全力以赴启动之前 ，明确 “成功 ”的含义极为重要 。如果不知道成功是什么样子 ，很难找准目标 ，也很难知道自己什么时候已经真正达到目标 。 在尝试学习任何东西之前 ，你都应该在自己脑海中清晰地描绘出成功的样子 。当你知道自己的目标是什么的时候 ，你就可以更轻松地使用倒推的方式 ，明确实现目标所需的步骤 。 现在 ，我们依然使用刚才那个学习数码摄影的例子 。你可能已经明确成功的标准包括掌握数码相机的所有功能 ，能够清晰地描述这些功能是什么 ，并且了解何时以及为什么使用每一项功能 。 这一步的目标是形成一份简明清晰的陈述 ，勾勒出你勤奋学习后的成功图景 。根据不同的学习内容 ，这份陈述也各不相同 。但是要确保其中包含具体的成功标准 ，从而能让你用来充分评估自己是否已经达成学习目标 。好的成功标准应该是具体的 、无二义性的 。不要对自己想要完成的任务进行含糊不清的描述 。相反 ，要列出某一特定的结果 ，或者一旦实现自己所能达到的目标你应该能够做到的事情 。下表列出，”好的“和‘不好的“成功标准</p>
<table>
<thead>
<tr>
<th align="left">不好的成功标准</th>
<th>好的成功标准</th>
</tr>
</thead>
<tbody><tr>
<td align="left">我知道如何使用HTML去构建一个网页</td>
<td>我可以使用HTML5在网上为我自己创建一个主页展示我的简历和我的代表性工作</td>
</tr>
<tr>
<td align="left">我学习了C#语言的基础知识</td>
<td>我可以利用C#语言的主要功能写出一个能够实际应用的小程序</td>
</tr>
<tr>
<td align="left">我可用Java语言的基础知识</td>
<td>我可以利用Java的基础功能写出一个程序</td>
</tr>
</tbody></table>
<p>你想从自己的学习经历中获得什么，就决定了你的成功标准是什么 。 请确保你能借此在学习结束后，来评估自己是否达成了目标 。好的成功标准也能让你向着既定目标不断前进 。</p>
<h3 id="第四步：寻找资源"><a href="#第四步：寻找资源" class="headerlink" title="第四步：寻找资源"></a>第四步：寻找资源</h3><p>还记得学生时代会针对某个特定主题写报告吗 ？如果你写好了报告却只有一条参考文献 ，譬如你所有的信息都来自一本书 ，结果会怎样 ？你可能不会拿到高分。为什么现在很多人学东西的时候却与那时如出一辙 ？关于一个主题我们只读一本书 ，或者所有的研究只使用一个资源 。</p>
<p>要尝试收集到多种多样的资源以帮助你学习 ，而不是只读一本关于这一主题的书 。资源可以是多种多样的 ，不局限于书籍 。事实上 ，如今 ，随着互联网的广泛应用 ，各种类型的内容随处可见 ，你几乎可以针对自己感兴趣的任何主题 ，找到大量的资源 。 </p>
<p>在这一步中 ，你会想找到尽可能多的与自己所选主题相关的资源 。此时你无需考虑这些资源的质量 。这一步与头脑风暴类似 。稍后你会对你找到的这些资源进行过滤 ，去伪存真 ，但是目前还是想先获得尽可能多的不同类型的资源 。要做到这一点 ，最好的方法就是迅速打开电脑 ，开始搜索与自己的主题相关的信息 。我通常会从bilibili开始 ，看看能从中找到做相关视频的up主 ；然后我会用 G o o g l e搜索 ，看看能不能找到视频 、博客文章 、播客和其他有用的内容 。你甚至可以去拜访图书馆 。重点就是你要找到各种不同的资源 。你不想因为单一来源的信息而产生偏见 ，更愿意尽可能获取各种各样的信息 。</p>
<h4 id="信息来源（主要针对的程序员）"><a href="#信息来源（主要针对的程序员）" class="headerlink" title="信息来源（主要针对的程序员）"></a>信息来源（主要针对的程序员）</h4><p>社区类：</p>
<ul>
<li><a href="https://github.com/">GitHub</a></li>
<li><a href="https://stackoverflow.com/">Stack Overflow（问答网站）</a></li>
<li><a href="https://juejin.im/">CSDN</a></li>
<li><a href="https://www.v2ex.com/">v2ex</a></li>
<li><a href="https://www.quora.com/topic/Computer-Programming">quora（国外版知乎）</a></li>
<li><a href="https://www.zhihu.com/topic/19554298/intro">知乎</a></li>
<li><a href="https://juejin.im/">掘金</a></li>
<li><a href="https://www.reddit.com/">reddit</a></li>
</ul>
<p>资讯类：</p>
<ul>
<li><a href="https://www.infoq.cn/">info</a></li>
<li><a href="https://toutiao.io/posts/hot/7">开发者头条</a></li>
<li><a href="http://www.cocoachina.com/">COCOChina_一站式开发者成长社区</a></li>
</ul>
<p>文章类：</p>
<ul>
<li><a href="https://www.cnblogs.com/">博客园</a></li>
<li><a href="https://gank.io/">干货集中营（Android和iOS）</a></li>
<li><a href="https://www.tuicool.com/">推酷</a></li>
</ul>
<p>面试类：</p>
<ul>
<li><a href="https://www.jiuzhang.com/">九章算法（数据结构和算法）</a></li>
<li><a href="https://careercup.com/">careercup</a></li>
<li><a href="https://www.lintcode.com/problem/">lintcode</a></li>
</ul>
<p>教程类：</p>
<ul>
<li><a href="https://www.51zxw.net/">我要自学网</a></li>
<li><a href="https://www.w3school.com.cn/">W3school全球最大的web技术教程网站</a></li>
<li><a href="https://www.w3cschool.cn/">W3Cschool</a></li>
<li><a href="https://www.runoob.com/">菜鸟教程</a></li>
<li><a href="https://www.imooc.com/">慕课</a></li>
<li><a href="https://www.jikexueyuan.com/">极客学院</a></li>
<li><a href="https://www.lanqiao.cn/courses/">蓝桥（实验楼与蓝桥合并到统一域名）</a></li>
<li><a href="https://study.163.com/">网易云课堂</a></li>
<li><a href="https://next.xuetangx.com/">学堂在线</a></li>
<li>中国大学<a href="https://www.icourse163.org/">MOOC</a></li>
</ul>
<p>开源类：</p>
<ul>
<li><a href="https://www.oschina.net/">OSCHINA（开源中国）</a></li>
<li><a href="https://www.open-open.com/">深度开源</a></li>
<li><a href="https://hellogithub.com/">HelloGitHub</a></li>
<li><a href="https://mirrors.tuna.tsinghua.edu.cn/">清华大学开源软件镜像站</a></li>
</ul>
<h3 id="第五步：创建学习计划"><a href="#第五步：创建学习计划" class="headerlink" title="第五步：创建学习计划"></a>第五步：创建学习计划</h3><p>你有没有注意过 ，大多数书籍都被分解成若干章 ，各章在内容上又层层推进 ？好的技术书都遵循这样的规律 ：打好基础 ，做好铺垫 ，然后逐个展开每一章的论述 。现在你已经掌握了一些资源 ，你可以借助这些资源对自己要学什么 、以什么顺序进行有了想法 。现在你应该对数码摄影到底要学什么有了很好的认识 。你需要通览已有的数码摄影的相关资料 ，找到一种方法将这个主题分解成更小的部分 。</p>
<p>对于大多数学科而言 ，学习是一个自然的过程 。从 A开始 ，前进到 B ，最后到达 Z 。这个顺序对你掌握随机的碎片化知识价值不大 。你需要找出在最短的时间内从 A到 Z的正确路径 ，并且到达沿途的重要地标 。</p>
<p>在这一步 ，你需要创建自己的学习路径 。把它看作自己写书时候的大纲 。事实上 ， 当你大功告成的时候 ，你会发现自己的学习路径可能与一本书的目录非常相似 。你基本上就是完成一系列的模块 ，直到最后达成目标 。</p>
<p>打造自己的学习计划 ，一个好方法就是观察别人是如何教你感兴趣的主题的 。就我自己而言 ，在这一步我通常会翻看自己在第 4步中找来的图书的目录 。如果五位不同的作者都把内容都分解为相同的模块和顺序 ，那我就会遵循这样的方法制订自己的学习计划 。这并不意味着你只要复制一本书的目录就可以称其为自己的学习计划了 。有的书的内容超出你的需求 ，有的书的结构很差劲儿 。通览你收集到的全部资源 ，你就对自己需要哪些内容以及如何组合这些内容有更清晰的认识 。</p>
<h3 id="第六步：筛选资源"><a href="#第六步：筛选资源" class="headerlink" title="第六步：筛选资源"></a>第六步：筛选资源</h3><p>现在 ，你知道自己要学什么以及以什么顺序学 ，那么是时候决定要使用哪些资源来完成自己的学习任务了 。回到第4步 ，你收集了与研究主题相关的所有资源 。在第5步中你使用这些资源制订了自己的个人学习计划 。 现在是时候对这些资源进行筛选 ，挑选最有价值的几项来帮你实现自己的目标 。这时的你已经有了大把关于数码摄影的书籍 、博客文章和其他资源等 ，不一而足 。但是 ，问题是你该如何利用这些资源 。很多数据都是冗余 ，并非所有资源都适合你的学习计划 。 为了研究一个主题要读 1 0本书 、50篇博客文章 ，并不现实 ，并且即使你真的这么做了 ，其中也有很大一部分是重复的 。因此很有必要对现有资源进行筛选 ，从中选出最能帮助你实现自己的目标的资源 。这样想一想 ：在第 6步中 ，你就是一位篮球教练 ，你需要精简队伍 。当然 ，你想让所有人都去打比赛 ，但这显然是不可能的 。你不得不将队员人数减少到自己可以管理的规模 。 在这一步中 ，把你在第 4步中收集的全部资源浏览一遍 ，找出哪些内容能够覆盖你的学习计划 。你还应当看看评论 ，试着找出品质最高的资源 。 我在购书时 ，通常会浏览亚马逊上的评论 ，找出我认为最物超所值的一两本书 。一旦完成了这一步 ，你就可以准备前进到学习计划中的第一个模块 。在你实现自己的目标之前 ，你还需要为每个模块重复第7步到第10步 。</p>
<blockquote>
<p><strong>采取行动</strong></p>
<p>挑选你想要了解的一项课题 ，实际经演练一下上述这六个步骤 。你可以从一些规模较小的课题开始 ，以便让自己习惯于这一过程 。但是注意 ，一定要实际运用 。如果你只是把这些步骤当作是阅读内容 ，那么它们对你不会有太大用处 。</p>
</blockquote>
<h2 id="第七步到第十步：循环往复"><a href="#第七步到第十步：循环往复" class="headerlink" title="第七步到第十步：循环往复"></a>第七步到第十步：循环往复</h2><p>在开始最有趣的部分 。接下来的四个步骤会在你的学习计划所定义的各个模块中循环往复 。 步骤 7到步骤 1 0的目标是通过 “学习 —实践 —掌握 —教授 ” （ L D L T ）的方式真正领会知识 。 你从掌握恰到好处可以开始的基础知识开始 ，然后通过操作来学习 ，同时也通过自我探索收集问题 。之后 ，你掌握了足够多的有用的知识 。最后 ，你能将自己学到的教给他人 ，以此来弥补自己在学习过程中的不足 ，同时通过深入思考巩固知识 。  </p>
<h3 id="第七步：开始学习，浅尝辄止"><a href="#第七步：开始学习，浅尝辄止" class="headerlink" title="第七步：开始学习，浅尝辄止"></a>第七步：开始学习，浅尝辄止</h3><p>大多数人 ，包括我自己 ，在学习过程中通常会犯两类错误 ：第一类错误是在知之不多的情况下就盲目开始 ，即行动太快 ；第二类错误是在行动之前准备过多 ，即行动太晚 。要想在这二者之间取得平衡 ，你掌握的知识要恰到好处 ，足以能让你开始学习 ，但又不会多到让你无力探索 ，这样你的学习效果最佳 。 在这一步中 ，你的目标是获得足够多的与所学主题相关的信息 ，从而能让你开始学习 ，并在下一步中动手操作 。对于编程语言或框架这样的技术 ，这一步还包括掌握如何创建一个基本的 “ H e l l o , w o r l d ! ”程序 ，或者设置自己的开发环境 。 对于摄影这个例子来说 ，这一步包括自己在不同的光线条件下调试光圈及其效果 。 这一步的关键在于过犹不及 。你会很容易就失去自控力 ，开始消化计划学习中列出的所有资源 。但是 ，你会发现 ，如果你能经受住这样的诱惑 ，你会取得更大的成就 。你要专注于掌握自己所需的 、能在下一步动手操作的最小量的知识 。你可以浏览参考材料 ，或者每章的摘要 ，或者各种简介 ，这些信息足以让你对自己要做什么有基本的认识 。</p>
<h3 id="第八步：动手操作，边玩边学"><a href="#第八步：动手操作，边玩边学" class="headerlink" title="第八步：动手操作，边玩边学"></a>第八步：动手操作，边玩边学</h3><p>这一步真是既有趣又可怕 。说它有趣是因为你真的是在玩耍 ，说它可怕是因为这一步完全没有边际 。这一步没有任何规则 ，你可以做任何你想做的事情 。如何更好地实施这一步 ，完全由你决定 。起初 ，你会觉得这步似乎并不重要 ，不过还是让我们先来考量一下其他的方式 ——大多数人学习的方式 。大多数人会试图通过读书或观看视频来掌握某个主题 。他们会提前吸收很多信息 ，然后再付诸实践 。这一方法的问题在于 ，在他们读书或看视频的时候 ，他们并不知道哪些内容是重点 。他们只是因循他人设计好的学习路径 。让我们继续学习数码摄影的例子 。假定你要学习光线对数码摄影的影响 ，所以在这一步中 ，你会一直练习在不同的光照条件下拍照 。你可能只是走到室外调节光圈 ，也可能在不同的环境下拍照 ；其间 ，你并没有意识到自己在做什么 。你在探索中学习 ，也发现了许多问题 。现在 ，考虑一下我在这里建议的方法 。 你无需提前了解全部内容 ，你要做的首要的一件事情就是亲自操作和亲身体验 。采用这种方法 ，你通过探索和实践进行学习 。在操作的过程中 ，你的大脑自然地产生各种问题 ：它是如何工作的 ？如果我这么做 ，会发生什么 ？我该如何解决这个问题 ？这些问题引导着你走向真正重要的方向 。当回过头寻找问题的答案的时 ，不只是这些问题迎刃而解 ，而且你记得的东西比你学习的东西要多得多 ，因为你所学到的都是对你很重要的东西 。在这一步中 ，你要采用在第 7步中学到的知识 。不用担心结果 ，勇敢探索吧 。如果你正在学一门新技术或者新的编程语言 ，你可以先创建一个小项目来测试这一步的效果 。把那些暂时还没有答案的问题记录下来 ，你在下一步中会有机会找出这些问题的答案 。</p>
<h3 id="第九步：全面掌握，学以致用"><a href="#第九步：全面掌握，学以致用" class="headerlink" title="第九步：全面掌握，学以致用"></a>第九步：全面掌握，学以致用</h3><p>好奇心是学习特别是自学的重要组成部分 。当我们还是孩子的时候 ，我们就处于主要由好奇心驱动的快速学习期 。我们想知道世界是如何运转的 ，所以我们提出问题 ，四处寻求答案 ，借此来了解我们所处的这个世界 。但是 ，随着我们日渐长大 ，大部分好奇心也随之消失 ，我们把世界上的一切看作理所当然 。结果 ，我们的学习放缓 ，我们觉得教育非常枯燥 ，并不令人着迷 。</p>
<p>这一步的目标就是让你找回好奇心驱动的学习 。 在第 8步中 ，你通过动手操作发现了一些尚未找到答案的问题 。现在 ，是时候来回答这些问题了 。在这一步中 ，你要利用先前收集到的所有资料 ，进行深入学习 。</p>
<p>让我们再回到数码摄影的例子 。假设你已经在调试光圈的过程中积累了一些问题 ，这时你可以通过阅读相关主题的资料来回答这些问题 。你可以通览已有的资料 ，仔细查找与光线和其他通过操作发现的问题有关的内容 。</p>
<p>为了有效利用自己选择的资料 ，为上一步产生的问题寻求答案 ，阅读文字 、观看视频 、与他人交流都是必要手段 。这能让你沉浸在学习材料中 ，尽可能地汲取知识 。</p>
<p>不要害怕回头再去操作 ，付出更多 ，因为这不仅能让你找到问题的答案 ，也能让你学到新东西 。给自己足够多的时间去深入理解自己的主题 ，你可以阅读 ，可以实验 ，可以观察 ，也可以操作 。</p>
<p>不过请记住 ，你依然没有必要把收集到的所有资料全部仔细看一遍 。你只需要阅读或观看与当前所学相关的部分 。我们很少能有足够的时间把一本书从头读到尾 。这些资料只是帮你自学 ，基本上你可以以解决在动手操作中发现的问题为主要目的 。</p>
<p>最后，千万不要忘了，你在第3步中定义的成功标准 。试着把自己正在学习的内容与最终目标关联起来 。你掌握的每个模块 ，都应该以某种方式推动你向着终极目标前进 。</p>
<h3 id="第十步：乐为人师，融会贯通"><a href="#第十步：乐为人师，融会贯通" class="headerlink" title="第十步：乐为人师，融会贯通"></a>第十步：乐为人师，融会贯通</h3><p>你告诉我的，我都忘了。你教会我的，我都记得。让我乐在其中，我就一定能学会。<br>                                                            ——本杰明 ·富兰克林</p>
<p>大多数人都不敢为人师 。 我曾经也是 。当你在思考自己知道的东西 （或者你认为自己知道的东西 ）是否值得教给别人的时候 ，很容易陷入自我怀疑之中 。但是 ，如果你想深入地掌握一门学问 ，想对这门学问做到融会贯通 ，那么你必须要做到 “好为人师 ” 。除此之外别无他法 。<br>在现实中 ，你只需要超前别人一步 ，就可以成为他们的老师 。有时候 ，比学生超前太多的 “专家 ”反而不能得心应手地 “教 ” ，因为他们无法与学生产生共鸣 。他们忘了初学者是什么样子 ，很容易专注于他们认为简单的细节 。</p>
<p>如果你想教别人自己学到的关于光线如何影响数码摄影的知识 ，你可以创建一个简单的 Y o u T u b e视频 ，展示不同的光源及它们对拍摄的影响 。你甚至还可以再简单一些 ，向朋友或同事解释光线是如何影响数码摄影效果的 ，我敢肯定许多人会对这个谈话很感兴趣 。</p>
<p>在这一步中 ，我会要求你走出自己的舒适区 ，将自己学到的知识教给别人 。要想确定你确实掌握了某些知识 ，这是唯一的办法 ；同时 ，在你将自己所学介绍给他人时 ，这也是查缺补漏的好办法 。在这一过程中 ，你要切实剖析并理解自己所学的知识 ，将其内化到自己的思想 ；同时 ，你也要用能够让他人理解的方式精心组织这些信息 。以我个人的经验来说 ，在我开始 “乐为人师 ”之后 ，我不仅在职业发展和专业成长上有了巨大飞跃 ，我的理解能力也更上一层楼 。</p>
<p>你可以用多种方式将自己所学教给他人 。你可以写博客，也可以制作bilibili视频 。你也可以跟自己的爱人探讨 ，将自己所学解释给他 /她 。重点在于，你要花时间将自己学到的东西从大脑中提取出来 ，以别人能够理解的方式组织起来 。在经历了整个这个过程之后你会发现 ，有很多你以为自己明白了的知识点 ，其实并没有摸透 。于是你会将那些以前自己没太明白的东西联系起来 ，并且简化自己大脑中已有的信息 ，将它们浓缩并经常复习 。</p>
<p>前景非常诱人 。所以，不管做什么，千万不要跳过这一步 。这一步对于保持信息以及深入理解知识而不仅仅只是流于表面至关重要 。</p>
<h4 id="教授知识的途径"><a href="#教授知识的途径" class="headerlink" title="教授知识的途径"></a>教授知识的途径</h4><ul>
<li>撰写博客和文章</li>
<li>出bilibili视频教程</li>
<li>发表演讲</li>
<li>与朋友进行对话探讨</li>
<li>在在线论坛上回答问题</li>
</ul>
<h3 id="最后的思考"><a href="#最后的思考" class="headerlink" title="最后的思考"></a>最后的思考</h3><p>学会自我教育需要奉献精神和辛勤工作 ，但是你也能从中收获无比丰厚的回报 。 “十步学习法 ”并非一个神奇公式 ，能够让你瞬间变得聪明伶俐 ，但这种方法可以将你的学习过程更为结构化 ，而不是漫无目的地一头扎进浩淼的知识海洋之中 ；这种方法通过利用人天生的好奇心来帮助你吸收更多的知识 ，而我们中大多数人正是在好奇心的驱使下才学到很多本领的 。</p>
<p>如果此方法中有些步骤对你不起作用 ，或者你觉得某些形式完全没有必要 ，完全可以弃之不理 。这些步骤本身并不重要 ，这一学习过程背后的理念才是真正重要的 。 重点就是你要开发出一套适合自己的自学体系 ，一套你可以持续不断地加以运用而获得丰硕成果的方法体系 。</p>
<blockquote>
<p><strong>采取行动</strong></p>
<p>针对你在第 2 9章中制订的学习计划的每一个模块执行第 7步到第 1 0步 ，完成你的学习实验 。现在 ，不要跳过任何步骤 。研究一下 ，如何让这种方法对你奏效 ，然后尝试优化它。</p>
</blockquote>
<p>本篇博客借鉴的链接：<a href="https://www.jianshu.com/p/1e6e27eefe76">https://www.jianshu.com/p/1e6e27eefe76</a></p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>学习方法</category>
      </categories>
      <tags>
        <tag>程序员</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/year/04/13/JavaWeb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><p>Java    Web</p>
<h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p>
<ul>
<li>web，网页的意思  ， <a href="http://www.baidu.com/">www.baidu.com</a></li>
<li>静态web<ul>
<li>html，css</li>
<li>提供给所有人看的数据始终不会发生变化！</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝，几乎是所有的网站；</li>
<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同！</li>
<li>技术栈：Servlet/JSP，ASP，PHP</li>
</ul>
</li>
</ul>
<p>在Java中，动态web资源开发的技术统称为JavaWeb；</p>
<h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>
<ul>
<li>a.html、b.html……多个web资源，这些web资源可以被外界访问，对外界提供服务；</li>
<li>你们能访问到的任何一个页面或者资源，都存在于这个世界的某一个角落的计算机上。</li>
<li>URL </li>
<li>这个统一的web资源会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>
<li>一个web应用由多部分组成 （静态web，动态web）<ul>
<li>html，css，js</li>
<li>jsp，servlet</li>
<li>Java程序</li>
<li>jar包</li>
<li>配置文件 （Properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理；</p>
<h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul>
<li>*.htm, *.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。通络；</li>
</ul>
<p><img src="JavaWeb.assets/1567822802516.png" alt="1567822802516"></p>
<ul>
<li>静态web存在的缺点<ul>
<li>Web页面无法动态更新，所有用户看到都是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript [实际开发中，它用的最多]</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互（数据无法持久化，用户无法交互）</li>
</ul>
</li>
</ul>
<h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示： “Web的页面展示的效果因人而异”；</p>
<p><img src="JavaWeb.assets/1567823191289.png" alt="1567823191289"></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的<strong>后台程序</strong>,重新发布；<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li>Web页面可以动态更新，所有用户看到都不是同一个页面</li>
<li>它可以与数据库交互 （数据持久化：注册，商品信息，用户信息……..）</li>
</ul>
<p><img src="JavaWeb.assets/1567823350584.png" alt="1567823350584"></p>
<p>新手村：–魔鬼训练（分析原理，看源码）–&gt; PK场</p>
<h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP:</strong></p>
<ul>
<li><p>微软：国内最早流行的就是ASP；</p>
</li>
<li><p>在HTML中嵌入了VB的脚本，  ASP + COM；</p>
</li>
<li><p>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其换乱</p>
</li>
<li><p>维护成本高！</p>
</li>
<li><p>C# </p>
</li>
<li><p>IIS</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">            <span class="attr">System.out.println</span>(&quot;<span class="attr">hello</span>&quot;)</span></span><br><span class="line"><span class="tag">            %&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<p><strong>php：</strong></p>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码很简单 （70% , WP）</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p>**JSP/Servlet : ** </p>
<p>B/S：浏览和服务器</p>
<p>C/S:  客户端和服务器</p>
<ul>
<li>sun公司主推的B/S架构</li>
<li>基于Java语言的 (所有的大公司，或者一些开源的组件，都是用Java写的)</li>
<li>可以承载三高问题带来的影响；</li>
<li>语法像ASP ， ASP–&gt;JSP , 加强市场强度；</li>
</ul>
<p>…..</p>
<h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息；</p>
<p><strong>IIS</strong></p>
<p>微软的； ASP…,Windows中自带的</p>
<p><strong>Tomcat</strong></p>
<p><img src="JavaWeb.assets/1567824446428.png" alt="1567824446428"></p>
<p>面向百度编程；</p>
<p>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，因为Tomcat 技术先进、性能稳定，而且<strong>免费</strong>，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p>
<p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个Java初学web的人来说，它是最佳的选择</p>
<p>Tomcat 实际上运行JSP 页面和Servlet。Tomcat最新版本为<strong>9.0。</strong></p>
<p>….</p>
<p><strong>工作3-5年之后，可以尝试手写Tomcat服务器；</strong></p>
<p>下载tomcat：</p>
<ol>
<li>安装 or  解压</li>
<li>了解配置文件及目录结构</li>
<li>这个东西的作用</li>
</ol>
<h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、-安装tomcat"><a href="#3-1、-安装tomcat" class="headerlink" title="3.1、 安装tomcat"></a>3.1、 安装tomcat</h3><p>tomcat官网：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a></p>
<p><img src="JavaWeb.assets/1567825600842.png" alt="1567825600842"></p>
<p><img src="JavaWeb.assets/1567825627138.png" alt="1567825627138"></p>
<h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p>
<p><img src="JavaWeb.assets/1567825763180.png" alt="1567825763180"></p>
<p><strong>启动。关闭Tomcat</strong></p>
<p><img src="JavaWeb.assets/1567825840657.png" alt="1567825840657"></p>
<p>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p>可能遇到的问题：</p>
<ol>
<li>Java环境变量没有配置</li>
<li>闪退问题：需要配置兼容性</li>
<li>乱码问题：配置文件中设置</li>
</ol>
<h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="JavaWeb.assets/1567825967256.png" alt="1567825967256"></p>
<p>可以配置启动的端口号</p>
<ul>
<li>tomcat的默认端口号为：8080</li>
<li>mysql：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以配置主机的名称</p>
<ul>
<li>默认的主机名为：localhost-&gt;127.0.0.1</li>
<li>默认网站应用存放的位置为：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;www.qinjiang.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="高难度面试题："><a href="#高难度面试题：" class="headerlink" title="高难度面试题："></a>高难度面试题：</h4><p>请你谈谈网站是如何进行访问的！</p>
<ol>
<li><p>输入一个域名；回车</p>
</li>
<li><p>检查本机的 C:\Windows\System32\drivers\etc\hosts配置文件下有没有这个域名映射；</p>
<ol>
<li><p>有：直接返回对应的ip地址，这个地址中，有我们需要访问的web程序，可以直接访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>       www.qinjiang.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；</p>
</li>
</ol>
<p><img src="JavaWeb.assets/1567827057913.png" alt="1567827057913"></p>
</li>
<li><p>可以配置一下环境变量（可选性）</p>
</li>
</ol>
<h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>
<ul>
<li>将自己写的网站，放到服务器(Tomcat)中指定的web应用的文件夹（webapps）下，就可以访问了</li>
</ul>
<p>网站应该有的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps ：Tomcat服务器的web目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -kuangstudy ：网站的目录名</span><br><span class="line">        - WEB-INF</span><br><span class="line">            -classes : java程序</span><br><span class="line">            -lib：web应用所依赖的jar包</span><br><span class="line">            -web.xml ：网站配置文件</span><br><span class="line">        - index.html 默认的首页</span><br><span class="line">        - <span class="keyword">static</span> </span><br><span class="line">            -css</span><br><span class="line">                -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">         -.....</span><br></pre></td></tr></table></figure>



<p>HTTP协议 ： 面试</p>
<p>Maven：构建工具</p>
<ul>
<li>Maven安装包</li>
</ul>
<p>Servlet 入门</p>
<ul>
<li>HelloWorld！</li>
<li>Servlet配置</li>
<li>原理</li>
</ul>
<h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>HTTP（超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p>
<ul>
<li>文本：html，字符串，~ ….</li>
<li>超文本：图片，音乐，视频，定位，地图…….</li>
<li>80</li>
</ul>
<p>Https：安全的</p>
<ul>
<li>443</li>
</ul>
<h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul>
<li><p>http1.0</p>
<ul>
<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接</li>
</ul>
</li>
<li><p>http2.0</p>
<ul>
<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。‘</li>
</ul>
</li>
</ul>
<h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul>
<li>客户端—发请求（Request）—服务器</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span> OK    状态码：<span class="number">200</span></span><br><span class="line">Remote（远程） Address:<span class="number">14.215</span>.<span class="number">177.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>

<h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>Get，Post</strong>，HEAD,DELETE,PUT,TRACT…<ul>
<li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</li>
</ul>
</li>
</ul>
<h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure>

<h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul>
<li>服务器—响应—–客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>    缓存控制</span><br><span class="line">Connection:Keep-Alive    连接</span><br><span class="line">Content-Encoding:gzip    编码</span><br><span class="line">Content-Type:text/html   类型</span><br></pre></td></tr></table></figure>

<h4 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1.响应体"></a>1.响应体</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-<span class="number">8</span>   GB2312  ISO8859-<span class="number">1</span></span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh：告诉客户端，多久刷新一次；</span><br><span class="line">Location：让网页重新定位；</span><br></pre></td></tr></table></figure>

<h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><p>200：请求响应成功  200</p>
<p>3xx：请求重定向 </p>
<ul>
<li>重定向：你重新到我给你新位置去；</li>
</ul>
<p>4xx：找不到资源   404</p>
<ul>
<li>资源不存在；</li>
</ul>
<p>5xx：服务器代码错误   500       502:网关错误</p>
<p><strong>常见面试题：</strong></p>
<p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p>
<ol>
<li><p>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</p>
</li>
<li><p>如何能够让一个东西自动帮我导入和配置这个jar包。</p>
<p>由此，Maven诞生了！</p>
</li>
</ol>
<h3 id="5-1-Maven项目架构管理工具"><a href="#5-1-Maven项目架构管理工具" class="headerlink" title="5.1 Maven项目架构管理工具"></a>5.1 Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>
<p>Maven的核心思想：<strong>约定大于配置</strong></p>
<ul>
<li>有约束，不要去违反。</li>
</ul>
<p>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；</p>
<h3 id="5-2-下载安装Maven"><a href="#5-2-下载安装Maven" class="headerlink" title="5.2 下载安装Maven"></a>5.2 下载安装Maven</h3><p>官网;<a href="https://maven.apache.org/">https://maven.apache.org/</a></p>
<p><img src="JavaWeb.assets/1567842350606.png" alt="1567842350606"></p>
<p>下载完成后，解压即可；</p>
<p>小狂神友情建议：电脑上的所有环境都放在一个文件夹下，方便管理；</p>
<h3 id="5-3-配置环境变量"><a href="#5-3-配置环境变量" class="headerlink" title="5.3 配置环境变量"></a>5.3 配置环境变量</h3><p>在我们的系统环境变量中</p>
<p>配置如下配置：</p>
<ul>
<li>M2_HOME     maven目录下的bin目录</li>
<li>MAVEN_HOME      maven的目录</li>
<li>在系统的path中配置  %MAVEN_HOME%\bin</li>
</ul>
<p><img src="JavaWeb.assets/1567842882993.png" alt="1567842882993"></p>
<p>测试Maven是否安装成功，保证必须配置完毕！</p>
<h3 id="5-4-阿里云镜像"><a href="#5-4-阿里云镜像" class="headerlink" title="5.4 阿里云镜像"></a>5.4 阿里云镜像</h3><p><img src="JavaWeb.assets/1567844609399.png" alt="1567844609399"></p>
<ul>
<li>镜像：mirrors<ul>
<li>作用：加速我们的下载</li>
</ul>
</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-本地仓库"><a href="#5-5-本地仓库" class="headerlink" title="5.5 本地仓库"></a>5.5 本地仓库</h3><p>在本地的仓库，远程仓库；</p>
<p><strong>建立一个本地仓库：</strong>localRepository</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Environment\apache-maven-3.6.2\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><ol>
<li><p>启动IDEA</p>
</li>
<li><p>创建一个MavenWeb项目</p>
<p><img src="JavaWeb.assets/1567844785602.png" alt="1567844785602"></p>
<p><img src="JavaWeb.assets/1567844841172.png" alt="1567844841172"></p>
<p><img src="JavaWeb.assets/1567844917185.png" alt="1567844917185"></p>
<p><img src="JavaWeb.assets/1567844956177.png" alt="1567844956177"></p>
<p><img src="JavaWeb.assets/1567845029864.png" alt="1567845029864"></p>
</li>
<li><p>等待项目初始化完毕</p>
<p><img src="JavaWeb.assets/1567845105970.png" alt="1567845105970"></p>
<p><img src="JavaWeb.assets/1567845137978.png" alt="1567845137978"></p>
</li>
<li><p>观察maven仓库中多了什么东西？</p>
</li>
<li><p>IDEA中的Maven设置</p>
<p>注意：IDEA项目创建成功后，看一眼Maven的配置</p>
<p><img src="JavaWeb.assets/1567845341956.png" alt="1567845341956"></p>
<p><img src="JavaWeb.assets/1567845413672.png" alt="1567845413672"></p>
</li>
<li><p>到这里，Maven在IDEA中的配置和使用就OK了!</p>
</li>
</ol>
<h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="JavaWeb.assets/1567845557744.png" alt="1567845557744"></p>
<p><img src="JavaWeb.assets/1567845717377.png" alt="1567845717377"></p>
<p>这个只有在Web应用下才会有！</p>
<p><img src="JavaWeb.assets/1567845782034.png" alt="1567845782034"></p>
<h3 id="5-8-标记文件夹功能"><a href="#5-8-标记文件夹功能" class="headerlink" title="5.8 标记文件夹功能"></a>5.8 标记文件夹功能</h3><p><img src="JavaWeb.assets/1567845910728.png" alt="1567845910728"></p>
<p><img src="JavaWeb.assets/1567845957139.png" alt="1567845957139"></p>
<p><img src="JavaWeb.assets/1567846034906.png" alt="1567846034906"></p>
<p><img src="JavaWeb.assets/1567846073511.png" alt="1567846073511"></p>
<h3 id="5-9-在-IDEA中配置Tomcat"><a href="#5-9-在-IDEA中配置Tomcat" class="headerlink" title="5.9 在 IDEA中配置Tomcat"></a>5.9 在 IDEA中配置Tomcat</h3><p><img src="JavaWeb.assets/1567846140348.png" alt="1567846140348"></p>
<p><img src="JavaWeb.assets/1567846179573.png" alt="1567846179573"></p>
<p><img src="JavaWeb.assets/1567846234175.png" alt="1567846234175"></p>
<p><img src="JavaWeb.assets/1567846369751.png" alt="1567846369751"></p>
<p>解决警告问题</p>
<p>必须要的配置：<strong>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字；</strong></p>
<p><img src="JavaWeb.assets/1567846421963.png" alt="1567846421963"></p>
<p><img src="JavaWeb.assets/1567846546465.png" alt="1567846546465"></p>
<p><img src="JavaWeb.assets/1567846559111.png" alt="1567846559111"></p>
<p><img src="JavaWeb.assets/1567846640372.png" alt="1567846640372"></p>
<h3 id="5-10-pom文件"><a href="#5-10-pom文件" class="headerlink" title="5.10 pom文件"></a>5.10 pom文件</h3><p>pom.xml 是Maven的核心配置文件</p>
<p><img src="JavaWeb.assets/1567846784849.png" alt="1567846784849"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Maven版本和头文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这里就是我们刚才配置的GAV--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Package：项目的打包方式</span></span><br><span class="line"><span class="comment">  jar：java应用</span></span><br><span class="line"><span class="comment">  war：JavaWeb应用</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的默认构建编码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--编码版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--具体依赖的jar包配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--项目构建用的东西--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="JavaWeb.assets/1567847410771.png" alt="1567847410771"></p>
<p>maven由于他的约定大于配置，我们之后可以能遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-12-IDEA操作"><a href="#5-12-IDEA操作" class="headerlink" title="5.12 IDEA操作"></a>5.12 IDEA操作</h3><p><img src="JavaWeb.assets/1567847630808.png" alt="1567847630808"></p>
<p><img src="JavaWeb.assets/1567847662429.png" alt="1567847662429"></p>
<h3 id="5-13-解决遇到的问题"><a href="#5-13-解决遇到的问题" class="headerlink" title="5.13 解决遇到的问题"></a>5.13 解决遇到的问题</h3><ol>
<li><p>Maven 3.6.2</p>
<p>解决方法：降级为3.6.1</p>
<p><img src="JavaWeb.assets/1567904721301.png" alt="1567904721301"></p>
</li>
<li><p>Tomcat闪退</p>
</li>
</ol>
<ol start="3">
<li><p>IDEA中每次都要重复配置Maven<br>在IDEA中的全局默认配置中去配置</p>
<p><img src="JavaWeb.assets/1567905247201.png" alt="1567905247201"></p>
<p><img src="JavaWeb.assets/1567905291002.png" alt="1567905291002"></p>
</li>
<li><p>Maven项目中Tomcat无法配置</p>
</li>
<li><p>maven默认web项目中的web.xml版本问题</p>
<p><img src="JavaWeb.assets/1567905537026.png" alt="1567905537026"></p>
</li>
<li><p>替换为webapp4.0版本和tomcat一致</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="7">
<li><p>Maven仓库的使用</p>
<p>地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
<p><img src="JavaWeb.assets/1567905870750.png" alt="1567905870750"></p>
<p><img src="JavaWeb.assets/1567905982979.png" alt="1567905982979"></p>
<p><img src="JavaWeb.assets/1567906017448.png" alt="1567906017448"></p>
<p><img src="JavaWeb.assets/1567906039469.png" alt="1567906039469"></p>
</li>
</ol>
<h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的Java类部署到web服务器中。</li>
</ul>
</li>
</ul>
<p><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p>
<h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p>
<ol>
<li><p>构建一个普通的Maven项目，删掉里面的src目录，以后我们的学习就在这个项目里面建立Moudel；这个空的工程就是Maven主工程；</p>
</li>
<li><p>关于Maven父子工程的理解：</p>
<p>父项目中会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子项目会有</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-02-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的java子项目可以直接使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven环境优化</p>
<ol>
<li>修改web.xml为最新的</li>
<li>将maven的结构搭建完整</li>
</ol>
</li>
<li><p>编写一个Servlet程序</p>
<p><img src="JavaWeb.assets/1567911804700.png" alt="1567911804700"></p>
<ol>
<li><p>编写一个普通类</p>
</li>
<li><p>实现Servlet接口，这里我们直接继承HttpServlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        writer.print(<span class="string">&quot;Hello,Serlvet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>编写Servlet的映射</p>
<p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="6">
<li><p>配置Tomcat</p>
<p>注意：配置项目发布的路径就可以了</p>
</li>
<li><p>启动测试，OK！</p>
</li>
</ol>
<h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p>
<p><img src="JavaWeb.assets/1567913793252.png" alt="1567913793252"></p>
<h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol>
<li><p>一个Servlet可以指定一个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet可以指定通用映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>默认请求路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定一些后缀或者前缀等等….</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/sajdlkajda.qinjiang</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.qinjiang<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>优先级问题<br>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p>
<h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//this.getInitParameter()   初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletConfig()   Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getServletContext()  Servlet上下文</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">&quot;秦疆&quot;</span>; <span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">&quot;username&quot;</span>,username); <span class="comment">//将一个数据保存在了ServletContext中，名字为：username 。值 username</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;名字&quot;</span>+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>getc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/getc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试访问结果；</p>
<h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置一些web应用初始化参数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    resp.getWriter().print(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了ServletDemo04&quot;</span>);</span><br><span class="line">    <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/gp&quot;); //转发的请求路径</span></span><br><span class="line">    <span class="comment">//requestDispatcher.forward(req,resp); //调用forward实现请求转发；</span></span><br><span class="line">    context.getRequestDispatcher(<span class="string">&quot;/gp&quot;</span>).forward(req,resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="JavaWeb.assets/1567924457532.png" alt="1567924457532"></p>
<h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现：都被打包到了同一个路径下：classes，我们俗称这个路径为classpath:</p>
<p>思路：需要一个文件流；</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root12312</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">zxczxczxc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/com/kuang/servlet/aa.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        String pwd = prop.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>访问测试即可ok；</p>
<h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p>响应的状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><ol>
<li>向浏览器输出消息 （一直在讲，就不说了）</li>
<li>下载文件<ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名是啥？</li>
<li>设置想办法让浏览器能够支持下载我们需要的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 要获取下载文件的路径</span></span><br><span class="line">    String realPath = <span class="string">&quot;F:\\班级管理\\西开【19525】\\2、代码\\JavaWeb\\javaweb-02-servlet\\response\\target\\classes\\秦疆.png&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;下载文件的路径：&quot;</span>+realPath);</span><br><span class="line">    <span class="comment">// 2. 下载的文件名是啥？</span></span><br><span class="line">    String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;\\&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">// 4. 获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">    <span class="comment">// 5. 创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">// 6. 获取OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">// 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的？</p>
<ul>
<li>前端实现</li>
<li>后端实现，需要用到 Java 的图片类，生产一个图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p><img src="JavaWeb.assets/1567931587955.png" alt="1567931587955"></p>
<p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另外一个web资源C，这个过程叫重定向</p>
<p>常见场景：</p>
<ul>
<li>用户登录</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        resp.setHeader(&quot;Location&quot;,&quot;/r/img&quot;);</span></span><br><span class="line"><span class="comment">        resp.setStatus(302);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/img&quot;</span>);<span class="comment">//重定向</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>面试题：请你聊聊重定向和转发的区别？</p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化</li>
<li>重定向时候，url地址栏会发生变化；</li>
</ul>
<p><img src="JavaWeb.assets/1567932163430.png" alt="1567932163430"></p>
<h4 id="5、简单实现登录重定向"><a href="#5、简单实现登录重定向" class="headerlink" title="5、简单实现登录重定向"></a>5、简单实现登录重定向</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<p><img src="JavaWeb.assets/1567933996830.png" alt="1567933996830"></p>
<p><img src="JavaWeb.assets/1567934023106.png" alt="1567934023106"></p>
<h4 id="获取参数，请求转发"><a href="#获取参数，请求转发" class="headerlink" title="获取参数，请求转发"></a>获取参数，请求转发</h4><p><img src="JavaWeb.assets/1567934110794.png" alt="1567934110794"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    String[] hobbys = req.getParameterValues(<span class="string">&quot;hobbys&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line">    <span class="comment">//后台接收中文乱码问题</span></span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(password);</span><br><span class="line">    System.out.println(Arrays.toString(hobbys));</span><br><span class="line">    System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(req.getContextPath());</span><br><span class="line">    <span class="comment">//通过请求转发</span></span><br><span class="line">    <span class="comment">//这里的 / 代表当前的web应用</span></span><br><span class="line">    req.getRequestDispatcher(<span class="string">&quot;/success.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化   307</li>
<li>重定向时候，url地址栏会发生变化； 302</li>
</ul>
<h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话</strong>：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p>
<p><strong>有状态会话</strong>：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p>
<p><strong>你能怎么证明你是西开的学生？</strong></p>
<p>你              西开</p>
<ol>
<li>发票                西开给你发票</li>
<li>学校登记        西开标记你来过了</li>
</ol>
<p><strong>一个网站，怎么证明你来过？</strong></p>
<p>客户端              服务端</p>
<ol>
<li>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie</li>
<li>服务器登记你来过了，下次你来的时候我来匹配你； seesion</li>
</ol>
<h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>
<ul>
<li>客户端技术   （响应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！</li>
</ul>
<p>常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p>
<h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><p><img src="JavaWeb.assets/1568344447291.png" alt="1568344447291"></p>
<ol>
<li>从请求中拿到cookie信息</li>
<li>服务器响应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">//获得Cookie</span></span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue(); <span class="comment">//获得cookie中的vlaue</span></span><br><span class="line"><span class="keyword">new</span> Cookie(<span class="string">&quot;lastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>); <span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//响应给客户端一个cookie</span></span><br></pre></td></tr></table></figure>

<p><strong>cookie：一般会保存在本地的 用户目录下 appdata；</strong></p>
<p>一个网站cookie是否存在上限！<strong>聊聊细节问题</strong></p>
<ul>
<li>一个Cookie只能保存一个信息；</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>
<li>Cookie大小有限制4kb；</li>
<li>300个cookie浏览器上限</li>
</ul>
<p><strong>删除Cookie；</strong></p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效；</li>
<li>设置有效期时间为 0 ；</li>
</ul>
<p><strong>编码解码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URLEncoder.encode(<span class="string">&quot;秦疆&quot;</span>,<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),<span class="string">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p><img src="JavaWeb.assets/1568344560794.png" alt="1568344560794"></p>
<p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户（浏览器）创建一个Seesion对象；</li>
<li>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；</li>
<li>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息…..</li>
</ul>
<p><img src="JavaWeb.assets/1568342773861.png" alt="1568342773861"></p>
<p>Session和cookie的区别：</p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）</li>
<li>Session把用户的数据写到用户独占Session中，服务器端保存  （保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象由服务创建；</li>
</ul>
<p>使用场景：</p>
<ul>
<li>保存一个登录用户的信息；</li>
<li>购物车信息；</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中；</li>
</ul>
<p>使用Session：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="keyword">new</span> Person(<span class="string">&quot;秦疆&quot;</span>,<span class="number">1</span>));</span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session创建成功,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;session以及在服务器中存在了,ID:&quot;</span>+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Session创建的时候做了什么事情；</span></span><br><span class="line"><span class="comment">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span></span><br><span class="line"><span class="comment">//        resp.addCookie(cookie);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//得到Session</span></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">Person person = (Person) session.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">HttpSession session = req.getSession();</span><br><span class="line">session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//手动注销Session</span></span><br><span class="line">session.invalidate();</span><br></pre></td></tr></table></figure>



<p><strong>会话自动过期：web.xml配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="JavaWeb.assets/1568344679763.png" alt="1568344679763"></p>
<h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p>
<p>最大的特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态的数据</li>
<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>
</ul>
</li>
</ul>
<h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底怎么执行的！</p>
<ul>
<li><p>代码层面没有任何问题</p>
</li>
<li><p>服务器内部工作</p>
<p>tomcat中有一个work目录；</p>
<p>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</p>
<p><img src="JavaWeb.assets/1568345873736.png" alt="1568345873736"></p>
<p>我电脑的地址：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator\.IntelliJIdea2018.<span class="number">1</span>\system\tomcat\Unnamed_javaweb-session-cookie\work\Catalina\localhost\ROOT\org\apache\jsp</span><br></pre></td></tr></table></figure>

<p>发现页面转变成了Java程序！</p>
<p><img src="JavaWeb.assets/1568345948307.png" alt="1568345948307"></p>
</li>
</ul>
<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</strong></p>
<p>JSP最终也会被转换成为一个Java类！</p>
<p><strong>JSP 本质上就是一个Servlet</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(.HttpServletRequest request,HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">      </span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断请求</p>
</li>
<li><p>内置一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession session = <span class="keyword">null</span>;    <span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;   <span class="comment">//applicationContext</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig config;         <span class="comment">//config</span></span><br><span class="line">javax.servlet.jsp.JspWriter out = <span class="keyword">null</span>;           <span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;               <span class="comment">//page：当前</span></span><br><span class="line">HttpServletRequest request                        <span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response                      <span class="comment">//响应</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出页面前增加的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html&quot;</span>);       <span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">                                          <span class="keyword">null</span>, <span class="keyword">true</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上的这些个对象我们可以在JSP页面中直接使用！</p>
</li>
</ol>
<p><img src="JavaWeb.assets/1568347078207.png" alt="1568347078207"></p>
<p>在JSP页面中；</p>
<p>只要是 JAVA代码就会原封不动的输出；</p>
<p>如果是HTML代码，就会被转换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样的格式，输出到前端！</p>
<h3 id="8-3、JSP基础语法"><a href="#8-3、JSP基础语法" class="headerlink" title="8.3、JSP基础语法"></a>8.3、JSP基础语法</h3><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p>
<h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a><strong>JSP表达式</strong></h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= <span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>



<h4 id="jsp脚本片段"><a href="#jsp脚本片段" class="headerlink" title="jsp脚本片段"></a><strong>jsp脚本片段</strong></h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">100</span> ; i++) &#123;</span><br><span class="line">    sum+=i;</span><br><span class="line">  &#125;</span><br><span class="line">  out.println(<span class="string">&quot;&lt;h1&gt;Sum=&quot;</span>+sum+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>脚本片段的再实现</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">  out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">  out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading Servlet!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> globalVar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;进入了方法Kuang！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>



<p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p>
<p>在JSP，嵌入Java代码即可！</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP的注释，不会在客户端显示，HTML就会！</p>
<h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args.... %&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--<span class="meta">@include</span>会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;/common/footer.jsp&quot;</span>/&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul>
<li>PageContext    存东西</li>
<li>Request     存东西</li>
<li>Response</li>
<li>Session      存东西</li>
<li>Application   【SerlvetContext】   存东西</li>
<li>config    【SerlvetConfig】</li>
<li>out</li>
<li>page ，不用了解</li>
<li>exception</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;秦疆1号&quot;</span>); <span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;秦疆2号&quot;</span>); <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;秦疆3号&quot;</span>); <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;秦疆4号&quot;</span>);  <span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>

<p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p>
<p>session：客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p>
<p>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p>
<h3 id="8-6、JSP标签、JSTL标签、EL表达式"><a href="#8-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="8.6、JSP标签、JSTL标签、EL表达式"></a>8.6、JSP标签、JSTL标签、EL表达式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL表达式的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>EL表达式：  ${ }</p>
<ul>
<li><strong>获取数据</strong></li>
<li><strong>执行运算</strong></li>
<li><strong>获取web开发的常用对象</strong></li>
</ul>
<p><strong>JSP标签</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--jsp:include--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">http:<span class="comment">//localhost:8080/jsptag.jsp?name=kuangshen&amp;age=12</span></span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;/jsptag2.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;name&quot; value=&quot;kuangshen&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;age&quot; value=&quot;12&quot;&gt;&lt;/jsp:param&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure>



<p><strong>JSTL表达式</strong></p>
<p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p>
<p><strong>格式化标签</strong></p>
<p><strong>SQL标签</strong></p>
<p><strong>XML 标签</strong></p>
<p><strong>核心标签</strong> （掌握部分）</p>
<p><img src="JavaWeb.assets/1568362473764.png" alt="1568362473764"></p>
<p><strong>JSTL标签库使用步骤</strong></p>
<ul>
<li>引入对应的 taglib</li>
<li>使用其中的方法</li>
<li><strong>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</strong></li>
</ul>
<p>c：if</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h4&gt;if测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;coreif.jsp&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;$&#123;param.username&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;登录&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;isAdmin&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;管理员欢迎您！&quot;</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=<span class="string">&quot;$&#123;isAdmin&#125;&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>c:choose   c:when</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">&quot;score&quot;</span> value=<span class="string">&quot;55&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=90&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=80&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&gt;=70&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;score&lt;=60&#125;&quot;</span>&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>c:forEach</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; people = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    people.add(<span class="number">0</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    people.add(<span class="number">1</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    people.add(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">    people.add(<span class="number">3</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line">    people.add(<span class="number">4</span>,<span class="string">&quot;田六&quot;</span>);</span><br><span class="line">    request.setAttribute(<span class="string">&quot;list&quot;</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line"><span class="keyword">var</span> , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;people&quot;</span> items=<span class="string">&quot;$&#123;list&#125;&quot;</span> begin=<span class="string">&quot;1&quot;</span> end=<span class="string">&quot;3&quot;</span> step=<span class="string">&quot;1&quot;</span> &gt;</span><br><span class="line">    &lt;c:out value=<span class="string">&quot;$&#123;people&#125;&quot;</span>/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h2><p>实体类</p>
<p>JavaBean有特定的写法：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get/set方法；</li>
</ul>
<p>一般用来和数据库的字段做映射  ORM；</p>
<p>ORM ：对象关系映射</p>
<ul>
<li>表—&gt;类</li>
<li>字段–&gt;属性</li>
<li>行记录—-&gt;对象</li>
</ul>
<p><strong>people表</strong></p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>秦疆1号</td>
<td>3</td>
<td>西安</td>
</tr>
<tr>
<td>2</td>
<td>秦疆2号</td>
<td>18</td>
<td>西安</td>
</tr>
<tr>
<td>3</td>
<td>秦疆3号</td>
<td>100</td>
<td>西安</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">1</span>,<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">2</span>,<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> People(<span class="number">3</span>,<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>，<span class="string">&quot;西安&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>过滤器</li>
<li>文件上传</li>
<li>邮件发送</li>
<li>JDBC 复习 ： 如何使用JDBC ,  JDBC crud， jdbc 事务</li>
</ul>
<h2 id="10、MVC三层架构"><a href="#10、MVC三层架构" class="headerlink" title="10、MVC三层架构"></a>10、MVC三层架构</h2><p>什么是MVC：  Model     view     Controller  模型、视图、控制器</p>
<h3 id="10-1、早些年"><a href="#10-1、早些年" class="headerlink" title="10.1、早些年"></a>10.1、早些年</h3><p><img src="JavaWeb.assets/1568423664332.png" alt="1568423664332"></p>
<p>用户直接访问控制层，控制层就可以直接操作数据库；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护  </span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line"></span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序猿调用</span><br><span class="line">|</span><br><span class="line">JDBC</span><br><span class="line">|</span><br><span class="line">Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure>

<h3 id="10-2、MVC三层架构"><a href="#10-2、MVC三层架构" class="headerlink" title="10.2、MVC三层架构"></a>10.2、MVC三层架构</h3><p><img src="JavaWeb.assets/1568424227281.png" alt="1568424227281"></p>
<p>Model</p>
<ul>
<li>业务处理 ：业务逻辑（Service）</li>
<li>数据持久层：CRUD   （Dao）</li>
</ul>
<p>View</p>
<ul>
<li>展示数据</li>
<li>提供链接发起Servlet请求 （a，form，img…）</li>
</ul>
<p>Controller  （Servlet）</p>
<ul>
<li><p>接收用户的请求 ：（req：请求参数、Session信息….）</p>
</li>
<li><p>交给业务层处理对应的代码 </p>
</li>
<li><p>控制视图的跳转  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="11、Filter-（重点）"><a href="#11、Filter-（重点）" class="headerlink" title="11、Filter （重点）"></a>11、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证….</li>
</ul>
<p><img src="JavaWeb.assets/1568424858708.png" alt="1568424858708"></p>
<p>Filter开发步骤：</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写过滤器</p>
<ol>
<li><p>导包不要错</p>
<p><img src="JavaWeb.assets/1568425162525.png" alt="1568425162525"></p>
<p>实现Filter接口，重写对应的方法即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Chain : 链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2. 必须要让过滤器继续同行</span></span><br><span class="line"><span class="comment">        chain.doFilter(request,response);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行前....&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response); <span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter执行后....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁：web服务器关闭的时候，过滤会销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>在web.xml中配置 Filter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;url-pattern&gt;/*&lt;/url-pattern&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="12、监听器"><a href="#12、监听器" class="headerlink" title="12、监听器"></a>12、监听器</h2><p>实现一个监听器的接口；（有N种）</p>
<ol>
<li><p>编写一个监听器</p>
<p>实现监听器的接口…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数 ： 统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建session监听： 看你的一举一动</span></span><br><span class="line">    <span class="comment">//一旦创建Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        System.out.println(se.getSession().getId());</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一旦销毁Session就会触发一次这个事件！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = se.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;OnlineCount&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> count = onlineCount.intValue();</span><br><span class="line">            onlineCount = <span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;OnlineCount&quot;</span>,onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Session销毁：</span></span><br><span class="line"><span class="comment">    1. 手动销毁  getSession().invalidate();</span></span><br><span class="line"><span class="comment">    2. 自动销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>web.xml中注册监听器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.kuang.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>看情况是否使用！</p>
</li>
</ol>
<h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">&quot;中秋节快乐&quot;</span>);  <span class="comment">//新建一个窗体</span></span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel(<span class="keyword">null</span>); <span class="comment">//面板</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>); <span class="comment">//设置窗体的布局</span></span><br><span class="line"></span><br><span class="line">        frame.setBounds(<span class="number">300</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        panel.setBounds(<span class="number">50</span>,<span class="number">50</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        panel.setBackground(<span class="keyword">new</span> Color(<span class="number">0</span>,<span class="number">255</span>,<span class="number">0</span>)); <span class="comment">//设置背景颜色</span></span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//监听事件，监听关闭事件</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.windowClosing(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p>
<ol>
<li><p>用户登录之后，向Sesison中放入用户的数据</p>
</li>
<li><p>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (request.getSession().getAttribute(Constant.USER_SESSION)==<span class="keyword">null</span>)&#123;</span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain.doFilter(request,response);</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h2 id="14、JDBC"><a href="#14、JDBC" class="headerlink" title="14、JDBC"></a>14、JDBC</h2><p>什么是JDBC ： Java连接数据库！</p>
<p><img src="JavaWeb.assets/1568439601825.png" alt="1568439601825"></p>
<p>需要jar包的支持：</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-conneter-java…  连接驱动（必须要导入）</li>
</ul>
<p><strong>实验环境搭建</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">users</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    <span class="string">`password`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">    email <span class="built_in">VARCHAR</span>(<span class="number">60</span>),</span><br><span class="line">    birthday <span class="built_in">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;zs@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ls@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">users</span>(<span class="keyword">id</span>,<span class="string">`name`</span>,<span class="string">`password`</span>,email,birthday)</span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;ww@qq.com&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span>    * <span class="keyword">FROM</span> <span class="keyword">users</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>导入数据库依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>IDEA中连接数据库：</p>
<p><img src="JavaWeb.assets/1568440926845.png" alt="1568440926845"></p>
<p><strong>JDBC 固定步骤：</strong></p>
<ol>
<li>加载驱动</li>
<li>连接数据库,代表数据库</li>
<li>向数据库发送SQL的对象Statement : CRUD</li>
<li>编写SQL （根据业务，不同的SQL）</li>
<li>执行SQL</li>
<li>关闭连接</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJdbc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.向数据库发送SQL的对象Statement,PreparedStatement : CRUD</span></span><br><span class="line">        Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;select * from users&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行查询SQL，返回一个 ResultSet  ： 结果集</span></span><br><span class="line">        ResultSet rs = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        rs.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>预编译SQL</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into  users(id, name, password, email, birthday) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.预编译</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//给第一个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;狂神说Java&quot;</span>);<span class="comment">//给第二个占位符？ 的值赋值为狂神说Java；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>);<span class="comment">//给第三个占位符？ 的值赋值为123456；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;24736743@qq.com&quot;</span>);<span class="comment">//给第四个占位符？ 的值赋值为1；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));<span class="comment">//给第五个占位符？ 的值赋值为new Date(new java.util.Date().getTime())；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.执行SQL</span></span><br><span class="line">        <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功@&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>事务</strong></p>
<p>要么都成功，要么都失败！</p>
<p>ACID原则：保证数据的安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交  commit()</span><br><span class="line">事务回滚  rollback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账：</span><br><span class="line">A:<span class="number">1000</span></span><br><span class="line">B:<span class="number">1000</span></span><br><span class="line">    </span><br><span class="line">A(<span class="number">900</span>)   --<span class="number">100</span>--&gt;   B(<span class="number">1100</span>) </span><br></pre></td></tr></table></figure>



<p><strong>Junit单元测试</strong></p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>简单使用</p>
<p>@Test注解只有在方法上有效，只要加了这个注解的方法，就可以直接运行！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="JavaWeb.assets/1568442261610.png" alt="1568442261610"></p>
<p>失败的时候是红色：</p>
<p><img src="JavaWeb.assets/1568442289597.png" alt="1568442289597"></p>
<p><strong>搭建一个环境</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">account</span>(</span><br><span class="line">   <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">   <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">40</span>),</span><br><span class="line">   money <span class="built_in">FLOAT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span>(<span class="string">`name`</span>,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;A&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span>(<span class="string">`name`</span>,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;B&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">account</span>(<span class="string">`name`</span>,money) <span class="keyword">VALUES</span>(<span class="string">&#x27;C&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置信息</span></span><br><span class="line">    <span class="comment">//useUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">    String url=<span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.加载驱动</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//2.连接数据库,代表数据库</span></span><br><span class="line">         connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.通知数据库开启事务,false 开启</span></span><br><span class="line">        connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        String sql = <span class="string">&quot;update account set money = money-100 where name = &#x27;A&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制造错误</span></span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line"></span><br><span class="line">        String sql2 = <span class="string">&quot;update account set money = money+100 where name = &#x27;B&#x27;&quot;</span>;</span><br><span class="line">        connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">        connection.commit();<span class="comment">//以上两条SQL都执行成功了，就提交事务！</span></span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//如果出现异常，就通知数据库回滚事务</span></span><br><span class="line">            connection.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
